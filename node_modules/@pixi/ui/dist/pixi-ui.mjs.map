{"version":3,"file":"pixi-ui.mjs","sources":["../src/ButtonEvents.ts","../src/Button.ts","../src/utils/helpers/view.ts","../src/Switcher.ts","../src/utils/helpers/cleanup.ts","../src/CheckBox.ts","../src/CircularProgressBar.ts","../src/ProgressBar.ts","../src/SliderBase.ts","../src/DoubleSlider.ts","../src/utils/helpers/text.ts","../src/utils/helpers/fit.ts","../src/FancyButton.ts","../src/Input.ts","../src/List.ts","../src/MaskedFrame.ts","../src/RadioGroup.ts","../src/utils/trackpad/Spring.ts","../src/utils/trackpad/ScrollSpring.ts","../src/utils/trackpad/SlidingNumber.ts","../src/utils/trackpad/Trackpad.ts","../src/ScrollBox.ts","../src/Select.ts","../src/Slider.ts"],"sourcesContent":["import { FederatedPointerEvent } from '@pixi/events';\nimport { isMobile, utils } from '@pixi/core';\nimport { Signal } from 'typed-signals';\nimport { Container } from '@pixi/display';\n\n/** Events controller used for {@link Button}. */\nexport class ButtonEvents\n{\n    protected _isMouseIn: boolean;\n    protected _isDown: boolean;\n\n    /** Event that is fired when the button is down. */\n    onDown: Signal<(btn?: this, e?: FederatedPointerEvent) => void>;\n    /**\n     * Event that fired when a down event happened inside the button\n     * and up event happened inside or outside of the button\n     */\n    onUp: Signal<(btn?: this, e?: FederatedPointerEvent) => void>;\n    /**\n     * Event that fired when mouse up event happens outside of the button\n     * after the down event happened inside the button boundaries.\n     */\n    onUpOut: Signal<(btn?: this, e?: FederatedPointerEvent) => void>;\n    /** Event that fired when the mouse is out of the view */\n    onOut: Signal<(btn?: this, e?: FederatedPointerEvent) => void>;\n    /** Event that is fired when the button is pressed. */\n    onPress: Signal<(btn?: this, e?: FederatedPointerEvent) => void>;\n    /** Event that is fired when the mouse hovers the button. Fired only if device is not mobile.*/\n    onHover: Signal<(btn?: this, e?: FederatedPointerEvent) => void>;\n\n    constructor()\n    {\n        this.onPress = new Signal();\n        this.onDown = new Signal();\n        this.onUp = new Signal();\n        this.onHover = new Signal();\n        this.onOut = new Signal();\n        this.onUpOut = new Signal();\n    }\n\n    protected connectEvents(view: Container)\n    {\n        if (utils.isMobile.any)\n        {\n            view.on('pointerdown', this.processDown, this);\n            view.on('pointerup', this.processUp, this);\n            view.on('pointerupoutside', this.processUpOut, this);\n            view.on('pointerout', this.processOut, this);\n            view.on('pointertap', this.processPress, this);\n            view.on('pointerover', this.processOver, this);\n        }\n        else\n        {\n            view.on('mousedown', this.processDown, this);\n            view.on('mouseup', this.processUp, this);\n            view.on('mouseupoutside', this.processUpOut, this);\n            view.on('mouseout', this.processOut, this);\n            view.on('click', this.processPress, this);\n            view.on('mouseover', this.processOver, this);\n        }\n    }\n\n    protected disconnectEvents(view: Container)\n    {\n        if (utils.isMobile.any)\n        {\n            view.off('pointerdown', this.processDown, this);\n            view.off('pointerup', this.processUp, this);\n            view.off('pointerupoutside', this.processUpOut, this);\n            view.off('pointerout', this.processOut, this);\n            view.off('pointertap', this.processPress, this);\n            view.off('pointerover', this.processOver, this);\n        }\n        else\n        {\n            view.off('mousedown', this.processDown, this);\n            view.off('mouseup', this.processUp, this);\n            view.off('mouseupoutside', this.processUpOut, this);\n            view.off('mouseout', this.processOut, this);\n            view.off('click', this.processPress, this);\n            view.off('mouseover', this.processOver, this);\n        }\n    }\n\n    protected processDown(e: FederatedPointerEvent): void\n    {\n        this._isDown = true;\n        this.onDown.emit(this, e);\n        this.down(e);\n    }\n\n    protected processUp(e?: FederatedPointerEvent)\n    {\n        if (this._isDown)\n        {\n            this.onUp.emit(this, e);\n            this.up(e);\n        }\n\n        this._isDown = false;\n    }\n\n    protected processUpOut(e?: FederatedPointerEvent)\n    {\n        if (this._isDown)\n        {\n            this.onUp.emit(this, e);\n            this.onUpOut.emit(this, e);\n            this.up(e);\n            this.upOut(e);\n        }\n\n        this._isDown = false;\n    }\n\n    protected processOut(e?: FederatedPointerEvent)\n    {\n        if (this._isMouseIn)\n        {\n            this._isMouseIn = false;\n            this.onOut.emit(this, e);\n            this.out(e);\n        }\n    }\n\n    protected processPress(e: FederatedPointerEvent)\n    {\n        this._isDown = false;\n        this.onPress.emit(this, e);\n        this.press(e);\n    }\n\n    protected processOver(e: FederatedPointerEvent)\n    {\n        if (isMobile.any) return;\n\n        this._isMouseIn = true;\n        this.onHover.emit(this, e);\n        this.hover(e);\n    }\n\n    /**\n     * Method called when the button pressed.\n     * To be overridden.\n     * @param {FederatedPointerEvent} _e - event data\n     */\n    down(_e?: FederatedPointerEvent)\n    {\n    // override me!\n    }\n\n    /**\n     * Method called when the button is up.\n     * To be overridden.\n     * @param {FederatedPointerEvent} _e - event data\n     */\n    up(_e?: FederatedPointerEvent)\n    {\n    // override me!\n    }\n\n    /**\n     * Method called when the up event happens outside of the button,\n     * after the down event happened inside the button boundaries.\n     * To be overridden.\n     * @param {FederatedPointerEvent} _e - event data\n     */\n    upOut(_e?: FederatedPointerEvent)\n    {\n    // override me!\n    }\n\n    /**\n     * Method called when the mouse leaves the button.\n     * To be overridden.\n     * @param {FederatedPointerEvent} _e - event data\n     */\n    out(_e?: FederatedPointerEvent)\n    {\n    // override me!\n    }\n\n    /**\n     * Method called when the mouse press down the button.\n     * To be overridden.\n     * @param {FederatedPointerEvent} _e - event data\n     */\n    press(_e?: FederatedPointerEvent)\n    {\n    // override me!\n    }\n\n    /**\n     * Method called when the mouse hovers the button.\n     * To be overridden.\n     * Fired only if device is not mobile.\n     * @param {FederatedPointerEvent} _e - event data\n     */\n    hover(_e?: FederatedPointerEvent)\n    {\n    // override me!\n    }\n\n    /** Getter that returns if the button is down. */\n    get isDown(): boolean\n    {\n        return this._isDown;\n    }\n}\n","import { Container } from '@pixi/display';\nimport { ButtonEvents } from './ButtonEvents';\nimport { Signal } from 'typed-signals';\nimport { FederatedPointerEvent } from '@pixi/events';\n\n/**\n * Adds button events to a given container-based view\n *\n * so you can subscribe to them and use your container-based instance as a button.\n * @example\n * const container = new Container();\n * const button = new Button(\n *      new Graphics()\n *          .beginFill(0xFFFFFF)\n *          .drawRoundedRect(0, 0, 100, 50, 15)\n * );\n *\n * button.onPress.connect(() => console.log('onPress'));\n *\n * container.addChild(button.view);\n * // or container.addChild(container); which is the same\n */\nexport class Button extends ButtonEvents\n{\n    /** Container, given as a constructor parameter that is a button view. */\n    protected _view: Container;\n\n    /**\n     * Turns a given container-based view into a button by adding all button events.\n     * @param {Container} view - instance of container, to be turned into button.\n     */\n    constructor(view?: Container)\n    {\n        super();\n\n        if (view)\n        {\n            this.view = view;\n            this.enabled = true;\n        }\n    }\n\n    /** Set button view, that all the interaction events are applied to. */\n    set view(view: Container)\n    {\n        const wasItInitiated = !!this._view;\n\n        if (wasItInitiated) this.disconnectEvents(this._view);\n\n        this._view = view;\n        this.connectEvents(this._view);\n    }\n\n    /** Get button view, thar all the interaction events are applied to. */\n    get view(): Container\n    {\n        return this._view;\n    }\n\n    /**\n     * Switcher, which prevents all button events from firing if off.\n     * @param {boolean} enabled\n     */\n    set enabled(enabled: boolean)\n    {\n        if (!this.view)\n        {\n            console.error('Button view is not set. Please set it before enabling the button.');\n\n            return;\n        }\n\n        this.view.eventMode = enabled ? 'static' : 'auto';\n        this.view.cursor = enabled ? 'pointer' : 'default';\n\n        if (!enabled && this.isDown)\n        {\n            this.processUp();\n        }\n    }\n\n    /** Getter that returns button state. */\n    get enabled(): boolean\n    {\n        return this.view.eventMode === 'static';\n    }\n}\n\n/**\n * Button based on container. You can use it same {@link Button}\n * but without need to pre create a container and interact with it through `.view` accessor.\n * @example\n * const button = new ButtonContainer(\n *      new Graphics()\n *          .beginFill(0xFFFFFF)\n *          .drawRoundedRect(0, 0, 100, 50, 15)\n * );\n *\n * button.onPress.connect(() => console.log('onPress'));\n *\n * container.addChild(button);\n */\nexport class ButtonContainer extends Container\n{\n    button: Button;\n\n    onDown: Signal<(btn?: Button, e?: FederatedPointerEvent) => void>;\n    onUp: Signal<(btn?: Button, e?: FederatedPointerEvent) => void>;\n    onUpOut: Signal<(btn?: Button, e?: FederatedPointerEvent) => void>;\n    onOut: Signal<(btn?: Button, e?: FederatedPointerEvent) => void>;\n    onPress: Signal<(btn?: Button, e?: FederatedPointerEvent) => void>;\n    onHover: Signal<(btn?: Button, e?: FederatedPointerEvent) => void>;\n\n    constructor(view?: Container)\n    {\n        super();\n\n        this.button = new Button(this);\n\n        this.button.enabled = true;\n\n        if (view)\n        {\n            this.addChild(view);\n        }\n\n        this.onPress = this.button.onPress;\n        this.onDown = this.button.onDown;\n        this.onUp = this.button.onUp;\n        this.onHover = this.button.onHover;\n        this.onOut = this.button.onOut;\n        this.onUpOut = this.button.onUpOut;\n    }\n\n    set enabled(enabled: boolean)\n    {\n        this.button.enabled = enabled;\n    }\n\n    get enabled(): boolean\n    {\n        return this.button.enabled;\n    }\n}\n","import { Container } from '@pixi/display';\nimport { Sprite } from '@pixi/sprite';\n\nexport function getView(view: string | Container): Container\n{\n    if (typeof view === 'string')\n    {\n        return Sprite.from(view);\n    }\n\n    return view;\n}\n\nexport function getSpriteView(view: string | Sprite): Sprite\n{\n    if (typeof view === 'string')\n    {\n        return Sprite.from(view);\n    }\n\n    return view;\n}\n","import { Container } from '@pixi/display';\nimport { Signal } from 'typed-signals';\nimport { getView } from './utils/helpers/view';\nimport { ButtonEvent } from './utils/HelpTypes';\n\n/**\n * Container based component that switches visibility of a given containers by any of the interaction events.\n *\n * By default it switches on press.\n *\n * Can be used for creating buttons, tabs, radio buttons, checkboxes etc.\n * @example\n * // switch on onPress\n * const switch = new Swich([`switch_off.png`, `switch_on.png`]);\n *\n * // switch on hover\n * const button = new Swich([`button_default.png`, `button_hover.png`], ['onHover', 'onOut']);\n *\n * button.events.onPress.connect(() => console.log('button pressed'));\n */\nexport class Switcher extends Container\n{\n    protected _triggerEvents: Set<ButtonEvent> = new Set(['onPress']);\n\n    /** Container that holds all the content of the component. */\n    innerView: Container;\n\n    /** The id of the visible(active) view. */\n    protected _active: number;\n\n    /** Fired when active view changes. */\n    onChange: Signal<(state: number | boolean) => void>;\n\n    /**\n     * @param {Array<Container | string>} views - Array of views or textures that will be switching.\n     * @param triggerEvents - Button events, to switch views (can be one event or an array of events).\n     * @param activeViewID - The id of the view, visible by default.\n     */\n    constructor(views?: Array<Container | string>, triggerEvents?: ButtonEvent | ButtonEvent[], activeViewID?: number)\n    {\n        super();\n\n        this.innerView = new Container();\n        this.addChild(this.innerView);\n\n        this.onChange = new Signal();\n\n        if (views) this.views = views;\n        if (triggerEvents) this.triggerEvents = triggerEvents;\n        if (activeViewID && this.views.length > 0) this.active = activeViewID;\n\n        this.setInteractionEvents();\n    }\n\n    protected setInteractionEvents()\n    {\n        this.innerView.eventMode = 'static';\n\n        this.innerView.on('pointerdown', () => this.handleEvents('onDown'));\n        this.innerView.on('pointerup', () => this.handleEvents('onUp'));\n        this.innerView.on('pointerupoutside', () => this.handleEvents('onUpOut'));\n        this.innerView.on('pointerout', () => this.handleEvents('onOut'));\n        this.innerView.on('pointertap', () => this.handleEvents('onPress'));\n        this.innerView.on('pointerover', () => this.handleEvents('onHover'));\n    }\n\n    protected handleEvents(event: ButtonEvent)\n    {\n        if (this._triggerEvents.has(event))\n        {\n            this.switch();\n        }\n    }\n\n    /** Returns the active view. */\n    get activeView(): Container | undefined\n    {\n        if (this.views && this.views[this.active])\n        {\n            return this.views[this.active] as Container;\n        }\n\n        return undefined;\n    }\n\n    /** Sets the list of instances for switching. */\n    set views(views: Array<Container | string>)\n    {\n        this.innerView.removeChildren();\n        views.forEach((stateView) => this.add(stateView));\n    }\n\n    /** Returns all the switchable views */\n    get views(): Array<Container>\n    {\n        return this.innerView.children as Array<Container>;\n    }\n\n    /**\n     * Adds view instance to a switching list.\n     * @param view\n     */\n    add(view: Container | string): void\n    {\n        const viewInstance = getView(view);\n\n        this.innerView.addChild(viewInstance);\n\n        viewInstance.visible = false;\n\n        if (this.views.length === 1)\n        {\n            this.active = 0;\n        }\n    }\n\n    /**\n     * Removes view instance from a switching list by id.\n     * @param id - id of the view to remove.\n     */\n    remove(id: number)\n    {\n        if (this.views[id])\n        {\n            this.innerView.removeChild(this.views[id]);\n        }\n    }\n\n    /**\n     * Sets a list of events that will make a switcher switch to the next view.\n     * @param {ButtonEvent | ButtonEvent[]} triggerEvents - Button events,\n     * to switch views (can be one event or an array of events).\n     */\n    set triggerEvents(triggerEvents: ButtonEvent | ButtonEvent[])\n    {\n        this._triggerEvents = new Set(Array.isArray(triggerEvents) ? triggerEvents : [triggerEvents]);\n    }\n\n    /** Returns a list of events that will make a switcher switch to the next view. */\n    get triggerEvents(): ButtonEvent[]\n    {\n        return Array.from(this._triggerEvents);\n    }\n\n    /**\n     * Show a view by id, or to next one by order, if no ID provided.\n     * @param {number} id - optional id of the view to show. If not set, will switch to the next view.\n     */\n    switch(id?: number)\n    {\n        if (id !== undefined && id === this.active) return;\n\n        const exID = this.active;\n\n        this.forceSwitch(id);\n\n        if (exID !== this.active)\n        {\n            const res = this.views.length > 2 ? this.active : this.active === 1;\n\n            this.onChange.emit(res);\n        }\n    }\n\n    /**\n     * Switches a view to a given one without triggering the onChange event.\n     * @param {number} id - optional id of the view to show. If not set, will switch to the next view.\n     */\n    forceSwitch(id?: number)\n    {\n        if (id !== undefined && id === this.active) return;\n\n        if (this.activeView)\n        {\n            this.activeView.visible = false;\n        }\n\n        if (id !== undefined && !this.views[id])\n        {\n            throw new Error(`View with id ${id} does not exist.`);\n        }\n\n        this._active = id !== undefined ? id : this.nextActive;\n\n        if (this._active === undefined)\n        {\n            return;\n        }\n\n        this.views[this.active].visible = true;\n    }\n\n    /** Returns the id of the next view in order. Or undefined, if order is empty. */\n    protected get nextActive(): number | undefined\n    {\n        if (this.views.length === 0) return undefined;\n\n        return this.active < this.views.length - 1 ? this.active + 1 : 0;\n    }\n\n    /** Sets the id of the visible(active) view and shows to it. */\n    set active(id: number)\n    {\n        this.switch(id);\n    }\n\n    /** Gets the id of the visible(active) view. */\n    get active(): number\n    {\n        return this._active;\n    }\n}\n","import { Container } from '@pixi/display';\n\nexport function cleanup(element: Container)\n{\n    if (!element) return;\n\n    if (element.parent)\n    {\n        element.parent.removeChild(element);\n    }\n\n    element.destroy();\n    element = null;\n}\n","import { Container } from '@pixi/display';\nimport { TextStyle, ITextStyle, Text } from '@pixi/text';\nimport { Signal } from 'typed-signals';\nimport { Switcher } from './Switcher';\nimport { cleanup } from './utils/helpers/cleanup';\nimport { getView } from './utils/helpers/view';\n\ntype LabelStyle = TextStyle | Partial<ITextStyle>;\n\ntype CheckBoxStyle = {\n    checked: Container | string;\n    unchecked: Container | string;\n    text?: LabelStyle;\n    textOffset?: {\n        x?: number;\n        y?: number;\n    };\n};\n\nexport type CheckBoxOptions = {\n    style: CheckBoxStyle;\n    text?: string;\n    checked?: boolean;\n};\n\n/**\n * Creates a container-based checkbox element.\n * @example\n *  new CheckBox({\n *     style: {\n *         unchecked: `switch_off.png`,\n *         checked: `switch_on.png`,\n *     }\n *  });\n */\nexport class CheckBox extends Switcher\n{\n    //* Text label */\n    label!: Text;\n\n    /** Signal emitted when checkbox state changes. */\n    onCheck: Signal<(state: boolean) => void>;\n\n    protected _style: CheckBoxStyle;\n\n    constructor(options: CheckBoxOptions)\n    {\n        super();\n\n        this.text = options.text;\n\n        this.style = options.style;\n\n        this.checked = options.checked;\n\n        this.triggerEvents = ['onPress'];\n\n        this.innerView.cursor = 'pointer';\n\n        this.onCheck = new Signal();\n\n        this.onChange.connect(() => this.onCheck.emit(this.checked));\n    }\n\n    protected addLabel(text?: string, style?: LabelStyle)\n    {\n        if (!text) return;\n\n        this.label = new Text(text ?? '', style ?? this._style?.text);\n        this.addChild(this.label);\n\n        this.label.cursor = 'pointer';\n        this.label.eventMode = 'static';\n        this.label.on('pointertap', () => (this.checked = !this.checked));\n    }\n\n    /** Setter, which sets a checkbox text. */\n    set text(text: string)\n    {\n        if (!text)\n        {\n            cleanup(this.label);\n\n            return;\n        }\n\n        this.label ? (this.label.text = text) : this.addLabel(text);\n    }\n\n    /** Getter, which returns a checkbox text. */\n    get text(): string | ''\n    {\n        return this.label?.text ?? '';\n    }\n\n    /** Setter, which sets a checkbox style settings. */\n    set style(style: CheckBoxStyle)\n    {\n        // Preserve checked state for the end of the method\n        const wasChecked = this.checked;\n\n        this._style = style;\n\n        const { unchecked, checked } = style;\n\n        const uncheckedView = getView(unchecked);\n        const checkedView = getView(checked);\n\n        this.views = [uncheckedView, checkedView];\n\n        if (wasChecked)\n        {\n            checkedView.visible = true;\n            this.active = 1;\n        }\n        else\n        {\n            uncheckedView.visible = true;\n        }\n\n        if (this.label)\n        {\n            if (style.text) this.label.style = style.text;\n\n            this.label.x = uncheckedView.width + 10 + (style.textOffset?.x ?? 0);\n            this.label.y = ((uncheckedView.height - this.label.height) / 2) + (style.textOffset?.y ?? 0);\n        }\n    }\n\n    /** Getter, which returns a checkbox style settings. */\n    get style(): CheckBoxStyle\n    {\n        return this._style;\n    }\n\n    /** Getter, which returns a checkbox state. */\n    get checked(): boolean\n    {\n        return this.active === 1;\n    }\n\n    /** Setter, which sets a checkbox state. */\n    set checked(checked: boolean)\n    {\n        this.switch(checked ? 1 : 0);\n    }\n\n    /**\n     * Setter, that sets a checkbox state without emitting a signal.\n     * @param checked\n     */\n    forceCheck(checked: boolean)\n    {\n        this.forceSwitch(checked ? 1 : 0);\n    }\n}\n","import { DEG_TO_RAD } from '@pixi/core';\nimport { Container } from '@pixi/display';\nimport { Graphics, LINE_CAP } from '@pixi/graphics';\n\nexport type MaskedProgressBarOptions = {\n    backgroundColor?: number;\n    fillColor: number;\n    lineWidth: number;\n    radius: number;\n    value?: number;\n    backgroundAlpha?: number;\n    fillAlpha?: number;\n    cap?: 'butt' | 'round' | 'square';\n};\n\n/**\n * Creates a Circular ProgressBar.\n * @example\n * const progressBar = new CircularProgressBar({\n *    backgroundColor: 0x000000,\n *    backgroundAlpha: 0.5,\n *    lineWidth: 10,\n *    fillColor: 0xFFFFFF,\n *    radius: 50,\n *    value: 50,\n *    cap: 'round'\n * });\n *\n * progressBar.progress = 100;\n */\nexport class CircularProgressBar extends Container\n{\n    private _progress = 0;\n    private options: MaskedProgressBarOptions;\n\n    private bgCircle = new Graphics();\n    private fillCircle = new Graphics();\n\n    /** Container, that holds all inner views. */\n    innerView = new Container();\n\n    /**\n     * Creates a Circular ProgressBar.\n     * @param { number } options - Options object to use.\n     * @param { number } options.backgroundColor - Background color.\n     * @param { number } options.fillColor - Fill color.\n     * @param { number } options.lineWidth - Line width.\n     * @param { number } options.radius - Radius.\n     * @param { number } options.value - Progress value.\n     * @param { number } options.backgroundAlpha - Background alpha.\n     * @param { number } options.fillAlpha - Fill alpha.\n     * @param { 'butt' | 'round' | 'square' } options.cap - Line cap.\n     */\n    constructor(options?: MaskedProgressBarOptions)\n    {\n        super();\n\n        this.options = options;\n\n        this.addChild(this.innerView);\n\n        this.innerView.addChild(this.bgCircle, this.fillCircle);\n\n        this.addBackground();\n\n        if (options.value)\n        {\n            this.progress = options.value;\n        }\n    }\n\n    private addBackground()\n    {\n        const {\n            backgroundColor,\n            lineWidth,\n            radius,\n            backgroundAlpha,\n        } = this.options;\n\n        let alpha = 1;\n\n        if (backgroundAlpha > 0)\n        {\n            alpha = backgroundAlpha;\n        }\n\n        if (backgroundColor === undefined)\n        {\n            alpha = 0.000001;\n        }\n\n        this.bgCircle.lineStyle({\n            width: lineWidth,\n            color: backgroundColor,\n            alpha\n        }).drawCircle(0, 0, radius);\n    }\n\n    /**\n     * Set progress value.\n     * @param { number } value - Progress value.\n     */\n    set progress(value: number)\n    {\n        if (value > 100)\n        {\n            value = 100;\n        }\n\n        if (value < 0)\n        {\n            value = 0;\n        }\n\n        this._progress = value;\n\n        const {\n            lineWidth,\n            radius,\n            fillColor,\n            fillAlpha,\n            cap\n        } = this.options;\n\n        if (value === 0 && fillAlpha === 0)\n        {\n            this.fillCircle.clear();\n\n            return;\n        }\n\n        const startAngle = 0;\n        const endAngle = 360 / 100 * value;\n\n        this.fillCircle\n            .clear()\n            .lineStyle({\n                width: lineWidth,\n                color: fillColor,\n                cap: cap as LINE_CAP,\n                alpha: fillAlpha\n            })\n            .arc(0, 0, radius, (0 - 90 + startAngle) * DEG_TO_RAD, (0 - 90 + startAngle + endAngle) * DEG_TO_RAD);\n    }\n\n    /**\n     * Current progress value.\n     * @returns { number } - Progress value.\n     */\n    get progress(): number\n    {\n        return this._progress;\n    }\n}\n","import { Container } from '@pixi/display';\nimport { Texture } from '@pixi/core';\nimport { Sprite } from '@pixi/sprite';\nimport { getSpriteView } from './utils/helpers/view';\nimport { NineSlicePlane as PixiNineSlicePlane } from '@pixi/mesh-extras';\nimport { Graphics } from '@pixi/graphics';\n\ntype FillPaddings = {\n    top?: number;\n    right?: number;\n    bottom?: number;\n    left?: number;\n};\n\nexport type ProgressBarViewType = Sprite | Graphics | string;\nexport type NineSlicePlane = {\n    bg: [number, number, number, number],\n    fill: [number, number, number, number]\n};\n\nexport type ProgressBarOptions = {\n    bg: ProgressBarViewType;\n    fill: ProgressBarViewType;\n    fillPaddings?: FillPaddings;\n    nineSlicePlane?: NineSlicePlane,\n    progress?: number;\n};\n\n/**\n * Creates a ProgressBar.\n * @example\n * new ProgressBar({\n *     bg: 'slider_bg.png',\n *     fill: 'slider.png',\n *     progress: 50,\n * });\n */\nexport class ProgressBar extends Container\n{\n    protected bg!: Sprite | PixiNineSlicePlane | Graphics;\n    protected fill!: Sprite | PixiNineSlicePlane | Graphics;\n    protected fillMask!: PixiNineSlicePlane | Graphics;\n    protected progressStart = 0;\n    protected _progress = 0;\n\n    protected options: ProgressBarOptions;\n\n    /** Container, that holds all inner views. */\n    innerView: Container;\n\n    /** Container, given as a constructor parameter that is a button view. */\n    protected _view: Container;\n\n    /**\n     * Creates a ProgressBar.\n     * @param options - Options.\n     * @param { Sprite | Graphics | string } options.bg - Background of the ProgressBar.\n     * @param { Sprite | Graphics | string } options.fill - Fill of the ProgressBar.\n     * @param { FillPaddings } options.fillPaddings - Fill offsets.\n     * @param { number } options.fillPaddings.top - Fill top offset.\n     * @param { number } options.fillPaddings.right - Fill right offset.\n     * @param { number } options.fillPaddings.bottom - Fill bottom offset.\n     * @param { number } options.fillPaddings.left - Fill left offset.\n     * @param { NineSlicePlane } options.nineSlicePlane - NineSlicePlane values for bg and fill.\n     * @param { Array } options.nineSlicePlane.bg - NineSlicePlane config for bg ([number, number, number, number]).\n     * @param { Array } options.nineSlicePlane.fill - NineSlicePlane config fill ([number, number, number, number]).\n     * @param { number } options.progress - Initial progress value.\n     */\n    constructor(options?: ProgressBarOptions)\n    {\n        super();\n\n        this.options = options;\n\n        this.innerView = new Container();\n        this.addChild(this.innerView);\n\n        if (options?.bg && options?.fill)\n        {\n            this.init(options);\n        }\n    }\n\n    /**\n     * Initialize ProgressBar.\n     * @param root0\n     * @param root0.bg - Background texture.\n     * @param root0.fill - Fill texture.\n     * @param root0.fillPaddings - Fill offset.\n     * @param root0.progress - Initial progress value.\n     */\n    init({ bg, fill, fillPaddings, progress }: ProgressBarOptions)\n    {\n        this.setBackground(bg);\n\n        this.setFill(fill, fillPaddings);\n\n        this.progress = progress;\n    }\n\n    /**\n     * Set bg.\n     * @param bg\n     */\n    setBackground(bg: ProgressBarViewType)\n    {\n        if (this.bg)\n        {\n            this.bg.destroy();\n        }\n\n        if (this.options?.nineSlicePlane)\n        {\n            if (typeof bg === 'string')\n            {\n                this.bg = new PixiNineSlicePlane(Texture.from(bg), ...this.options.nineSlicePlane.bg);\n            }\n            else\n            {\n                console.warn('NineSlicePlane can not be used with views set as Container.');\n            }\n        }\n\n        if (bg instanceof Graphics)\n        {\n            this.bg = bg;\n        }\n\n        if (!this.bg && (typeof bg === 'string' || bg instanceof Sprite))\n        {\n            this.bg = getSpriteView(bg);\n        }\n\n        this.innerView.addChildAt(this.bg, 0);\n    }\n\n    /**\n     * Set fill.\n     * @param fill\n     * @param fillPadding\n     */\n    setFill(fill: ProgressBarViewType, fillPadding?: FillPaddings)\n    {\n        if (this.fill)\n        {\n            this.fill.destroy();\n        }\n\n        // in case if user is trying to use same instance for bg and fill\n        if (this.bg instanceof Sprite && fill === this.bg)\n        {\n            console.warn('Can not use same Sprite instance for bg and fill.');\n\n            return;\n        }\n\n        if (this.options?.nineSlicePlane)\n        {\n            if (typeof fill === 'string')\n            {\n                this.fill = new PixiNineSlicePlane(Texture.from(fill), ...this.options.nineSlicePlane.fill);\n            }\n            else\n            {\n                console.warn('NineSlicePlane can not be used with views set as Container.');\n            }\n        }\n\n        if (!this.fill)\n        {\n            if (fill instanceof Graphics)\n            {\n                this.fill = fill;\n            }\n            else\n            {\n                this.fill = getSpriteView(fill);\n            }\n        }\n\n        this.innerView.addChildAt(this.fill, 1);\n\n        const offsetX = fillPadding?.left ?? 0;\n        const offsetY = fillPadding?.top ?? 0;\n\n        this.fill.x = offsetX;\n        this.fill.y = offsetY;\n\n        if (this.fillMask)\n        {\n            this.fill.mask = null;\n            this.fillMask.destroy();\n        }\n\n        const leftWidth = this.fill.width / 2;\n        const rightWidth = this.fill.width / 2;\n        const topHeight = this.fill.height / 2;\n        const bottomHeight = this.fill.height / 2;\n\n        let texture: Texture = Texture.WHITE;\n\n        if (this.fill instanceof Sprite && this.fill.texture)\n        {\n            texture = this.fill.texture;\n        }\n\n        this.fillMask = new PixiNineSlicePlane(texture, leftWidth, topHeight, rightWidth, bottomHeight);\n\n        this.fill.addChild(this.fillMask);\n        this.fill.mask = this.fillMask;\n    }\n\n    protected validate(progress: number): number\n    {\n        progress = Math.round(progress);\n\n        if (progress < 0)\n        {\n            return 0;\n        }\n\n        if (progress > 100)\n        {\n            return 100;\n        }\n\n        return progress;\n    }\n\n    /** Set current progress percentage value. */\n    set progress(progress: number)\n    {\n        this._progress = this.validate(progress);\n\n        if (!this.fill) return;\n\n        if (this.fillMask)\n        {\n            this.fillMask.width = this.fill.width / 100 * (this._progress - this.progressStart);\n            this.fillMask.x = this.progressStart / 100 * this.fill.width;\n            this.fillMask.height = this.fill.height;\n        }\n    }\n\n    /** Return current progress percentage value. */\n    get progress(): number\n    {\n        return this._progress;\n    }\n\n    /**\n     * Sets width of a ProgressBars background and fill.\n     * If nineSlicePlane is set, then width will be set to nineSlicePlane.\n     * If nineSlicePlane is not set, then width will control components width as Container.\n     * @param width - Width value.\n     */\n    override set width(width: number)\n    {\n        if (this.options?.nineSlicePlane)\n        {\n            if (this.bg)\n            {\n                this.bg.width = width;\n            }\n\n            if (this.fill)\n            {\n                const leftPadding = this.options.fillPaddings?.left ?? 0;\n                const rightPadding = this.options.fillPaddings?.right ?? 0;\n\n                this.fill.width = width - leftPadding - rightPadding;\n                this.fillMask.width = width - leftPadding - rightPadding;\n            }\n\n            this.progress = this._progress;\n        }\n        else\n        {\n            super.width = width;\n        }\n    }\n\n    /** Gets width of a ProgressBar. */\n    override get width(): number\n    {\n        return super.width;\n    }\n\n    /**\n     * Sets height of a ProgressBars background and fill.\n     * If nineSlicePlane is set, then height will be set to nineSlicePlane.\n     * If nineSlicePlane is not set, then height will control components height as Container.\n     * @param height - Height value.\n     */\n    override set height(height: number)\n    {\n        if (this.options?.nineSlicePlane)\n        {\n            if (this.bg)\n            {\n                this.bg.height = height;\n            }\n\n            if (this.fill)\n            {\n                const topPadding = this.options.fillPaddings?.top ?? 0;\n                const bottomPadding = this.options.fillPaddings?.bottom ?? 0;\n\n                this.fill.height = height - topPadding - bottomPadding;\n                this.fillMask.height = height - topPadding - bottomPadding;\n            }\n\n            this.progress = this._progress;\n        }\n        else\n        {\n            super.height = height;\n        }\n    }\n\n    /** Gets height of a ProgressBar. */\n    override get height(): number\n    {\n        return super.height;\n    }\n}\n","import { Container } from '@pixi/display';\nimport { Sprite } from '@pixi/sprite';\nimport { ITextStyle, Text, TextStyle } from '@pixi/text';\nimport type { DragObject } from './utils/HelpTypes';\nimport { FederatedPointerEvent } from '@pixi/events';\nimport { ProgressBar, ProgressBarOptions, ProgressBarViewType } from './ProgressBar';\nimport { getView } from './utils/helpers/view';\n\nexport type BaseSliderOptions = ProgressBarOptions & {\n    min?: number;\n    max?: number;\n    valueTextStyle?: TextStyle | Partial<ITextStyle>;\n    showValue?: boolean;\n    valueTextOffset?: {\n        x?: number;\n        y?: number;\n    };\n};\n\nexport type DoubleSliderOptions = BaseSliderOptions & {\n    slider1?: Container | string;\n    slider2?: Container | string;\n\n    value1?: number;\n    value2?: number;\n};\n\n/** Hepper class, used as a base for single or double slider creation. */\nexport class SliderBase extends ProgressBar\n{\n    protected _slider1: Container;\n    protected _slider2: Container;\n\n    protected value1Text?: Text;\n    protected value2Text?: Text;\n\n    protected _value1: number;\n    protected _value2: number;\n\n    protected dragging = 0;\n\n    /** Minimal value. */\n    min = 0;\n\n    /** Maximal value. */\n    max = 100;\n\n    protected startX!: number;\n    protected startUpdateValue1!: number;\n    protected startUpdateValue2!: number;\n\n    protected settings: DoubleSliderOptions;\n\n    constructor(options: DoubleSliderOptions)\n    {\n        super(options);\n\n        this.settings = options;\n\n        this.slider1 = options.slider1;\n        this.slider2 = options.slider2;\n\n        this.min = options.min ?? 0;\n        this.max = options.max ?? 100;\n    }\n\n    /**\n     * Sets Slider1 instance.\n     * @param value - Container or string with texture name.\n     */\n    set slider1(value: Container | string)\n    {\n        if (!value) return;\n\n        if (this._slider1)\n        {\n            this.slider1.removeAllListeners();\n            this.slider1.destroy();\n        }\n\n        this._slider1 = this.createSlider(value);\n\n        if (this.settings.showValue && !this.value1Text)\n        {\n            this.value1Text = new Text('', this.settings.valueTextStyle || { fill: 0xffffff });\n            this.value1Text.anchor.set(0.5);\n            this.addChild(this.value1Text);\n        }\n    }\n\n    /** Get Slider1 instance. */\n    get slider1(): Container\n    {\n        return this._slider1;\n    }\n\n    /**\n     * Sets Slider2 instance.\n     * @param value - Container or string with texture name.\n     */\n    set slider2(value: Container | string)\n    {\n        if (!value) return;\n\n        if (this._slider2)\n        {\n            this.slider2.removeAllListeners();\n            this.slider2.destroy();\n        }\n\n        this._slider2 = this.createSlider(value);\n\n        if (this.settings.showValue && !this.value2Text)\n        {\n            this.value2Text = new Text('', this.settings.valueTextStyle || { fill: 0xffffff });\n            this.value2Text.anchor.set(0.5);\n            this.addChild(this.value2Text);\n        }\n    }\n\n    /** Get Slider2 instance. */\n    get slider2(): Container\n    {\n        return this._slider2;\n    }\n\n    /**\n     * Set bg.\n     * @param bg\n     */\n    override setBackground(bg: ProgressBarViewType)\n    {\n        if (this.bg)\n        {\n            this.bg.removeAllListeners();\n        }\n\n        super.setBackground(bg);\n\n        this.activateBG();\n    }\n\n    protected activateBG()\n    {\n        this.bg.eventMode = 'static';\n        this.bg\n            .on('pointerdown', this.startUpdate, this)\n            .on('globalpointermove', this.update, this)\n            .on('pointerup', this.endUpdate, this)\n            .on('pointerupoutside', this.endUpdate, this);\n    }\n\n    protected createSlider(sliderData: Container | string): Container\n    {\n        const slider = getView(sliderData);\n\n        slider.x = slider.width / 2;\n\n        const container = new Container();\n\n        container.addChild(slider);\n\n        if (slider instanceof Sprite)\n        {\n            slider.anchor.set(0.5);\n        }\n\n        container.y = this.bg?.height / 2 ?? 0;\n\n        this.addChild(container);\n\n        return container;\n    }\n\n    protected startUpdate(event: FederatedPointerEvent)\n    {\n        this.dragging = 1;\n\n        const obj = event.currentTarget as DragObject;\n\n        this.startX = obj.parent.worldTransform.applyInverse(event.global).x;\n\n        this.startUpdateValue1 = this._value1;\n        this.startUpdateValue2 = this._value2;\n        this.update(event);\n    }\n\n    protected endUpdate()\n    {\n        if (!this.dragging) return;\n        this.dragging = 0;\n\n        if (!!this.startX || (this.startUpdateValue1 !== this._value1 || this.startUpdateValue2 !== this._value2))\n        {\n            this.change();\n        }\n\n        this.startUpdateValue1 = null;\n        this.startUpdateValue2 = null;\n    }\n\n    protected onClick()\n    {\n        this.change();\n    }\n\n    /* Called when dragging started and on every move. */\n    protected update(_event: FederatedPointerEvent)\n    {\n        const obj = _event.currentTarget as DragObject;\n\n        const { x } = obj.parent.worldTransform.applyInverse(_event.global);\n\n        if (x !== this.startX)\n        {\n            this.startX = null;\n        }\n    }\n\n    /** Called when dragging stopped. */\n    protected change()\n    {\n    // override me\n    }\n}\n","import { FederatedPointerEvent } from '@pixi/events';\nimport type { DragObject } from './utils/HelpTypes';\nimport { DoubleSliderOptions, SliderBase } from './SliderBase';\nimport { Signal } from 'typed-signals';\nimport { Container } from '@pixi/display';\n\n/**\n * Creates a slider with range selection option.\n * @example\n * const doubleSlider = new DoubleSlider({\n *      bg: 'slider_bg.png',\n *      fill: 'slider_progress.png',\n *      slider1: 'slider.png',\n *      slider2: 'slider.png',\n *  });\n *\n * doubleSlider.onChange.connect((value1, value2) =>\n *     console.log(`New slider range ${value1} - ${value2}`)S\n * );\n */\n\nexport class DoubleSlider extends SliderBase\n{\n    protected sliderOptions: DoubleSliderOptions;\n\n    protected activeValue: 'value1' | 'value2';\n\n    /** Signal that fires when value have changed. */\n    onChange: Signal<(value1: number, value2: number) => void> = new Signal();\n\n    /** Signal that fires when value is changing. */\n    onUpdate: Signal<(value1: number, value2: number) => void> = new Signal();\n\n    constructor(options: DoubleSliderOptions)\n    {\n        super(options);\n\n        this.sliderOptions = options;\n        this.setInitialState();\n    }\n\n    protected setInitialState()\n    {\n        this.validateValues();\n\n        const { value1, value2 } = this.sliderOptions;\n\n        this.updateProgress(value1, value2);\n\n        this.value2 = value2;\n        this.value1 = value1;\n    }\n\n    protected updateProgress(value1 = this.value1, value2 = this.value2)\n    {\n        this.progressStart = ((value1 - this.min) / (this.max - this.min)) * 100;\n        this.progress = ((value2 - this.min) / (this.max - this.min)) * 100;\n    }\n\n    protected validateValues()\n    {\n        if (!this.sliderOptions.value1)\n        {\n            this.sliderOptions.value1 = this.min;\n        }\n\n        if (!this.sliderOptions.value2)\n        {\n            this.sliderOptions.value2 = this.sliderOptions.max;\n        }\n\n        if (this.sliderOptions.value2 < this.sliderOptions.value1)\n        {\n            this.sliderOptions.value2 = this.sliderOptions.value1;\n        }\n\n        if (this.sliderOptions.value1 < this.sliderOptions.min)\n        {\n            this.sliderOptions.value1 = this.sliderOptions.min;\n        }\n\n        if (this.sliderOptions.value1 > this.sliderOptions.max)\n        {\n            this.sliderOptions.value1 = this.sliderOptions.max;\n        }\n\n        if (this.sliderOptions.value2 > this.sliderOptions.max)\n        {\n            this.sliderOptions.value2 = this.sliderOptions.max;\n        }\n    }\n\n    /** Returns left value. */\n    get value1(): number\n    {\n        return this._value1;\n    }\n\n    /** Sets left value. */\n    set value1(value1: number)\n    {\n        if (value1 === this._value1) return;\n\n        if (value1 < this.min) value1 = this.min;\n        if (value1 > this._value2) value1 = this._value2;\n\n        this._value1 = value1;\n\n        this.updateSlider1();\n\n        this.onUpdate?.emit(this.value1, this.value2);\n    }\n\n    /** Returns right value. */\n    get value2(): number\n    {\n        return this._value2;\n    }\n\n    /** Sets right value. */\n    set value2(value2: number)\n    {\n        if (value2 === this._value2) return;\n\n        if (value2 < this._value1) value2 = this._value1;\n        if (value2 > this.max) value2 = this.max;\n\n        this._value2 = value2;\n\n        this.updateSlider2();\n\n        this.onUpdate?.emit(this.value1, this.value2);\n    }\n\n    protected override update(event: FederatedPointerEvent)\n    {\n        super.update(event);\n\n        if (!this.dragging) return;\n\n        const obj = event.currentTarget as DragObject;\n        const { x } = obj.parent.worldTransform.applyInverse(event.global);\n\n        const slider1Dist = Math.abs(x - this._slider1.x - this._slider1.width);\n        const slider2Dist = Math.abs(x - this._slider2.x);\n\n        if (!this.activeValue)\n        {\n            if (this.slider1 && x < this.slider1.x)\n            {\n                this.activeValue = 'value1';\n            }\n            else if (this.slider2 && x > this.slider2.x)\n            {\n                this.activeValue = 'value2';\n            }\n            else\n            {\n                this.activeValue = slider1Dist < slider2Dist ? 'value1' : 'value2';\n            }\n        }\n\n        const progress = this.validate((x / this.bg?.width) * 100);\n\n        if (this.activeValue === 'value1')\n        {\n            this.progressStart = progress;\n            this.value1 = this.min + (((this.max - this.min) / 100) * progress);\n            this.updateProgress(this.value1, this.value2);\n        }\n        else\n        {\n            this.progress = progress;\n            this.value2 = this.min + (((this.max - this.min) / 100) * progress);\n            this.updateProgress(this.value1, this.value2);\n        }\n    }\n\n    protected override endUpdate()\n    {\n        super.endUpdate();\n\n        this.activeValue = null;\n    }\n\n    protected override change()\n    {\n        this.onChange?.emit(this.value1, this.value2);\n    }\n\n    /**\n     * Set Slider1 instance.\n     * @param value - Container or string with texture name.\n     */\n    override set slider1(value: Container | string)\n    {\n        super.slider1 = value;\n        this.updateSlider1();\n    }\n\n    /** Get Slider1 instance. */\n    override get slider1(): Container\n    {\n        return this._slider1;\n    }\n\n    /**\n     * Sets Slider instance.\n     * @param value - Container or string with texture name.\n     */\n    override set slider2(value: Container | string)\n    {\n        super.slider2 = value;\n        this.updateSlider2();\n    }\n\n    /** Get Slider2 instance. */\n    override get slider2(): Container\n    {\n        return this._slider2;\n    }\n\n    protected updateSlider1()\n    {\n        this._slider1.x = (this.bg?.width / 100 * this.progressStart) - (this._slider1.width / 2);\n        this._slider1.y = this.bg?.height / 2;\n\n        if (this._slider2 && this._slider1.x > this._slider2.x)\n        {\n            this._slider1.x = this._slider2.x;\n        }\n\n        if (this.sliderOptions?.showValue)\n        {\n            this.value1Text.text = `${Math.round(this.value1)}`;\n\n            const sliderPosX = this._slider1.x + (this._slider1.width / 2);\n            const sliderPosY = this._slider1.y;\n\n            this.value1Text.x = sliderPosX + (this.sliderOptions.valueTextOffset?.x ?? 0);\n            this.value1Text.y = sliderPosY + (this.sliderOptions.valueTextOffset?.y ?? 0);\n        }\n    }\n\n    protected updateSlider2()\n    {\n        this._slider2.x = ((this.bg?.width / 100) * this.progress) - (this._slider2.width / 2);\n        this._slider2.y = this.bg?.height / 2;\n\n        if (this._slider2.x < this._slider1.x)\n        {\n            this._slider2.x = this._slider1.x;\n        }\n\n        if (this.sliderOptions?.showValue)\n        {\n            this.value2Text.text = `${Math.round(this.value2)}`;\n\n            const sliderPosX = this._slider2.x + (this._slider2.width / 2);\n            const sliderPosY = this._slider2.y;\n\n            this.value2Text.x = sliderPosX + (this.sliderOptions.valueTextOffset?.x ?? 0);\n            this.value2Text.y = sliderPosY + (this.sliderOptions.valueTextOffset?.y ?? 0);\n        }\n    }\n\n    /**\n     * Sets width of a Sliders background and fill.\n     * If nineSlicePlane is set, then width will be set to nineSlicePlane.\n     * If nineSlicePlane is not set, then width will control components width as Container.\n     * @param value - Width value.\n     */\n    override set width(value: number)\n    {\n        super.width = value;\n\n        this.updateSlider1();\n        this.updateSlider2();\n    }\n\n    /** Gets width of a Slider. */\n    override get width(): number\n    {\n        return super.width;\n    }\n\n    /**\n     * Sets height of a Sliders background and fill.\n     * If nineSlicePlane is set, then height will be set to nineSlicePlane.\n     * If nineSlicePlane is not set, then height will control components height as Container.\n     * @param value - Height value.\n     */\n    override set height(value: number)\n    {\n        super.height = value;\n\n        this.updateSlider1();\n        this.updateSlider2();\n    }\n\n    /** Gets height of a Slider. */\n    override get height(): number\n    {\n        return super.height;\n    }\n}\n","import { Text } from '@pixi/text';\nimport { BitmapText } from '@pixi/text-bitmap';\nimport { HTMLText } from '@pixi/text-html';\n\nexport type PixiText = Text | BitmapText | HTMLText;\nexport type AnyText = string | number | PixiText;\n\nexport function getTextView(text: AnyText): Text | BitmapText | HTMLText\n{\n    if (typeof text === 'string' || typeof text === 'number')\n    {\n        return new Text(String(text));\n    }\n\n    return text;\n}\n","import { Container } from '@pixi/display';\n\nexport function fitToView(parent: Container, child: Container, padding = 0)\n{\n    let scaleX = child.scale.x;\n    let scaleY = child.scale.y;\n\n    const maxWidth = parent.width - (padding * 2);\n    const maxHeight = parent.height - (padding * 2);\n\n    const widthOverflow = maxWidth - Math.round(child.width);\n    const heightOverflow = maxHeight - Math.round(child.height);\n\n    if (widthOverflow < 0)\n    {\n        scaleX = maxWidth / (child.width * scaleX);\n    }\n\n    if (heightOverflow < 0)\n    {\n        scaleY = maxHeight / (child.height * scaleY);\n    }\n\n    if (scaleX <= 0 || scaleY <= 0)\n    {\n        child.visible = false;\n    }\n\n    child.scale.set(Math.min(scaleX, scaleY));\n}\n","import { ObservablePoint, Ticker, Rectangle, utils, Texture } from '@pixi/core';\nimport { Container } from '@pixi/display';\nimport type { Sprite } from '@pixi/sprite';\nimport { getView } from './utils/helpers/view';\nimport { AnyText, getTextView, PixiText } from './utils/helpers/text';\nimport { fitToView } from './utils/helpers/fit';\nimport { Tween, Group } from 'tweedle.js';\nimport { ButtonContainer } from './Button';\nimport { NineSlicePlane } from '@pixi/mesh-extras';\n\ntype State = 'default' | 'hover' | 'pressed' | 'disabled';\ntype Pos = { x?: number; y?: number };\ntype PosList = { [K in State]?: Pos };\n\nexport type Offset = Pos & PosList;\n\ntype ButtonViewType = 'defaultView' | 'hoverView' | 'pressedView' | 'disabledView';\n\ntype ButtonView = string | Container;\n\ntype BasicButtonViews = {\n    [K in ButtonViewType]?: Container | NineSlicePlane;\n};\n\ntype ButtonViews = BasicButtonViews & {\n    textView?: PixiText;\n    iconView?: Container;\n};\n\ntype AnimationData = {\n    x?: number;\n    y?: number;\n    width?: number;\n    height?: number;\n    scale?: Pos;\n};\n\ntype Animation = {\n    props: AnimationData;\n    duration?: number;\n};\n\ntype StateAnimations = {\n    [K in State]?: Animation;\n};\n\ntype BasicViewsInput = {\n    [K in ButtonViewType]?: ButtonView;\n};\n\ntype ViewsInput = BasicViewsInput & {\n    text?: AnyText;\n    icon?: ButtonView;\n};\n\nexport type ButtonOptions = ViewsInput & {\n    padding?: number;\n    scale?: number;\n    anchor?: number;\n    anchorX?: number;\n    anchorY?: number;\n    offset?: Offset;\n    textOffset?: Offset;\n    iconOffset?: Offset;\n    animations?: StateAnimations;\n    nineSlicePlane?: [number, number, number, number];\n};\n\n/**\n * Button component with a lot of tweaks.\n *\n * All views, text, icon and animations are optional. You can set them via constructor pr update later.\n *\n * By default text view and icon view are centered in the active view.\n *\n * Offset property of the constructor can be used to adjust the position of the text, icon and the views.\n * @example\n * const button = new FancyButton({\n *     defaultView: `button.png`,\n *     hoverView: `button_hover.png`,\n *     pressedView: `button_pressed.png`,\n *     text: 'Click me!',\n *     animations: {\n *          hover: {\n *              props: {\n *                  scale: {\n *                      x: 1.1,\n *                      y: 1.1,\n *                  }\n *              },\n *              duration: 100,\n *          },\n *          pressed: {\n *              props: {\n *                  scale: {\n *                      x: 0.9,\n *                      y: 0.9,\n *                  }\n *              },\n *              duration: 100,\n *          }\n *      }\n * });\n *\n * button.onPress.connect(() => console.log('Button pressed!'));\n */\nexport class FancyButton extends ButtonContainer\n{\n    protected animations: StateAnimations;\n    protected originalInnerViewState: AnimationData;\n    protected defaultDuration = 100;\n\n    /** FancyButton options. */\n    protected readonly options?: ButtonOptions;\n\n    /** Padding of the button text view. If button text does not fit active view + padding it will scale down to fit. */\n    _padding: number;\n\n    /** Offset of the button state views. If state views have different sizes, this option can help adjust them. */\n    _offset: Offset & Pos;\n\n    /** Offset of the text view. Can be set to any state of the button. */\n    _textOffset: Offset;\n\n    /** Offset of the icon view. Can be set to any state of the button. */\n    iconOffset: Offset;\n\n    //* View that holds all button inner views */\n    innerView = new Container();\n\n    protected _views: ButtonViews = {};\n\n    /** State of the button. Possible valuers are: 'default', 'hover', 'pressed', 'disabled' */\n    state: State;\n\n    /** Anchor point of the button. */\n    anchor: ObservablePoint;\n\n    /**\n     * Creates a button with a lot of tweaks.\n     * @param {object} options - Button options.\n     * @param {Container} options.defaultView - Container-based view that is shown when non of the button events are active.\n     * @param {Container} options.hoverView - Container-based view that is shown when the mouse hovers over the button.\n     * @param {Container} options.pressedView - Container-based view, shown when the mouse press on the component.\n     * @param {Container} options.disabledView - Container-based view shown when the button is disabled.\n     * @param {Container} options.icon - Container-based view for the button icon.\n     * @param {Text} options.text - Text-based view for the button text.\n     * @param {number} options.padding - Padding of the button text and icon views.\n     * If button text or icon does not fit active view + padding it will scale down to fit.\n     * @param {Point} options.offset - Offset of the button state views.\n     * @param {Point} options.textOffset - Offset of the text view.\n     * @param {Point} options.iconOffset - Offset of the icon view.\n     * @param {number} options.scale - Scale of the button. Scale will be applied to a main container,\n     * when all animations scales will be applied to the inner view.\n     * @param {number} options.anchor - Anchor point of the button.\n     * @param {number} options.anchorX - Horizontal anchor point of the button.\n     * @param {number} options.anchorY - Vertical anchor point of the button.\n     * @param options.animations - Animations that will be played when the button state changes.\n     */\n    constructor(options?: ButtonOptions)\n    {\n        super();\n\n        this.options = options;\n\n        const {\n            defaultView,\n            hoverView,\n            pressedView,\n            disabledView,\n            text,\n            padding,\n            offset,\n            textOffset,\n            iconOffset,\n            scale,\n            anchor,\n            anchorX,\n            anchorY,\n            icon,\n            animations\n        } = options ?? {};\n\n        this.addChild(this.innerView);\n\n        this.anchor = new ObservablePoint(this.updateAnchor, this);\n        this.anchor.set(anchorX ?? anchor ?? 0, anchorY ?? anchor ?? 0);\n\n        this.padding = padding ?? 0;\n        this.offset = offset;\n        this.textOffset = textOffset;\n        this.iconOffset = iconOffset;\n        this.scale.set(scale ?? 1);\n\n        if (animations)\n        {\n            this.animations = animations;\n            Ticker.shared.add(() => Group.shared.update());\n        }\n\n        this.setState('default');\n\n        this.defaultView = defaultView;\n        this.hoverView = hoverView;\n        this.pressedView = pressedView;\n        this.disabledView = disabledView;\n        this.text = text;\n        this.iconView = icon;\n\n        this.initStateControl();\n    }\n\n    /**\n     * Updates the text of the button and updates its scaling basing on the new size.\n     * @param {string | number} text\n     */\n    set text(text: AnyText)\n    {\n        if (!text || text === 0)\n        {\n            this.removeView('textView');\n\n            return;\n        }\n\n        if (!this._views.textView)\n        {\n            this.createTextView(text);\n\n            return;\n        }\n\n        this._views.textView.text = text.toString();\n    }\n\n    /** Returns the text string of the button text element. */\n    get text(): string | undefined\n    {\n        return this._views.textView?.text;\n    }\n\n    /**\n     * Setter, that prevents all button events from firing.\n     * @param {boolean} enabled\n     */\n    override set enabled(enabled: boolean)\n    {\n        this.button.enabled = enabled;\n\n        this.setState(enabled ? 'default' : 'disabled');\n    }\n\n    override get enabled(): boolean\n    {\n        return this.button.enabled;\n    }\n\n    /**\n     * Updates button state and shows the according views.\n     *\n     * Updates positions and offsets of the views.\n     *\n     * Plays animations if they are set.\n     * @param {State} newState\n     * @param force\n     */\n    setState(newState: State, force = false)\n    {\n        if (!force && this.state === newState)\n        {\n            return;\n        }\n\n        const currentView = this.getStateView(this.state);\n\n        if (currentView) currentView.visible = false;\n\n        this.state = newState;\n\n        const activeView = this.getStateView(newState);\n\n        if (activeView)\n        {\n            this.setOffset(activeView, newState, this.offset);\n            activeView.visible = true;\n        }\n\n        this.updateAnchor();\n\n        this.playAnimations(newState);\n    }\n\n    /**\n     *\n     * Manage button text view.\n     * @param {string | Text} text - can be a string, Text, BitmapText ot HTMLText (Container-based element).\n     */\n    protected createTextView(text: AnyText)\n    {\n        this._views.textView = getTextView(text);\n        this._views.textView.anchor.set(0);\n        this.innerView.addChild(this._views.textView);\n\n        this.adjustTextView(this.state);\n    }\n\n    /**\n     * Manages views offsets if it's set.\n     * @param view\n     * @param state\n     * @param offset\n     */\n    protected setOffset(view: Container, state: State, offset: Offset)\n    {\n        const stateOffset = offset\n            ? offset[state]\n            : {\n                x: 0,\n                y: 0\n            };\n\n        const defaultStateOffset = offset?.default;\n\n        if (stateOffset)\n        {\n            view.x += stateOffset.x ?? 0;\n            view.y += stateOffset.y ?? 0;\n        }\n        else if (defaultStateOffset)\n        {\n            view.x += defaultStateOffset.x ?? 0;\n            view.y += defaultStateOffset.y ?? 0;\n        }\n        else if (offset.x || offset.y)\n        {\n            view.x += offset.x ?? 0;\n            view.y += offset.y ?? 0;\n        }\n    }\n\n    /**\n     * Returns active view for the state.\n     * @param state\n     */\n    protected getStateView(state: State): Container | undefined\n    {\n        if (!this._views) return undefined;\n\n        switch (state)\n        {\n            case 'hover':\n                return this._views.hoverView ?? this._views.defaultView ?? undefined;\n            case 'pressed':\n                return this._views.pressedView ?? this._views.hoverView ?? this._views.defaultView ?? undefined;\n            case 'disabled':\n                return this._views.disabledView ?? this._views.defaultView ?? undefined;\n            case 'default':\n                return this._views.defaultView ?? undefined;\n            default:\n                return undefined;\n        }\n    }\n\n    /**\n     * Adjusts text view position and scale.\n     * @param {State} state\n     */\n    protected adjustTextView(state: State)\n    {\n        if (!this.text) return;\n\n        const activeView = this.getStateView(this.state);\n\n        if (activeView)\n        {\n            fitToView(activeView, this._views.textView, this.padding);\n\n            this._views.textView.x = activeView.x + (activeView.width / 2);\n            this._views.textView.y = activeView.y + (activeView.height / 2);\n        }\n\n        this._views.textView.anchor.set(0.5);\n\n        this.setOffset(this._views.textView, state, this.textOffset);\n    }\n\n    /**\n     * Adjusts icon view position and scale.\n     * @param {State} state\n     */\n    protected adjustIconView(state: State)\n    {\n        if (!this._views.iconView)\n        {\n            return;\n        }\n\n        const activeView = this.getStateView(state);\n\n        if (!activeView)\n        {\n            return;\n        }\n\n        fitToView(activeView, this._views.iconView, this.padding);\n\n        (this._views.iconView as Sprite).anchor?.set(0);\n\n        this._views.iconView.x = activeView.x + (activeView.width / 2) - (this._views.iconView.width / 2);\n        this._views.iconView.y = activeView.y + (activeView.height / 2) - (this._views.iconView.height / 2);\n\n        this.setOffset(this._views.iconView, state, this.iconOffset);\n    }\n\n    /**\n     * Reset views positions according to the button anchor setting.\n     * We have to set the anchor position for each view individually, as each of them\n     * can be a different type of view (container without anchor, sprite with anchor, etc)\n     * we have to reset all anchors to 0,0 and then set the positions manually.\n     */\n    protected updateAnchor()\n    {\n        if (!this._views) return;\n\n        const anchorX = this.anchor.x ?? 0;\n        const anchorY = this.anchor.y ?? 0;\n        const views = [this._views.defaultView, this._views.hoverView, this._views.pressedView, this._views.disabledView];\n\n        views.forEach((view) =>\n        {\n            if (!view) return;\n\n            (view as Sprite).anchor?.set(0);\n\n            view.x = -view.width * anchorX;\n            view.y = -view.height * anchorY;\n        });\n\n        if (this._views.defaultView)\n        {\n            const { x, y, width, height } = this._views.defaultView;\n\n            this.hitArea = new Rectangle(x, y, width, height);\n        }\n\n        this.adjustIconView(this.state);\n        this.adjustTextView(this.state);\n    }\n\n    /**\n     * Sets the default view of the button.\n     * @param { string | Container } view - string (path to the image) or a Container-based view\n     */\n    set defaultView(view: ButtonView | null)\n    {\n        this.updateView('defaultView', view);\n    }\n\n    /** Returns the default view of the button. */\n    get defaultView(): Container | undefined\n    {\n        return this._views.defaultView;\n    }\n\n    /**\n     * Sets the hover view of the button.\n     * @param { string | Container } view - string (path to the image) or a Container-based view\n     */\n    set hoverView(view: ButtonView | null)\n    {\n        this.updateView('hoverView', view);\n        if (this._views.hoverView && this.state !== 'hover')\n        {\n            this._views.hoverView.visible = false;\n        }\n    }\n\n    /** Returns the hover view of the button. */\n    get hoverView(): Container | undefined\n    {\n        return this._views.hoverView;\n    }\n\n    /** Sets the pressed view of the button. */\n    set pressedView(view: ButtonView | null)\n    {\n        this.updateView('pressedView', view);\n        if (this._views.pressedView)\n        {\n            this._views.pressedView.visible = false;\n        }\n    }\n\n    /** Returns the pressed view of the button. */\n    get pressedView(): Container | undefined\n    {\n        return this._views.pressedView;\n    }\n\n    /** Sets the disabled view of the button. */\n    set disabledView(view: ButtonView | null)\n    {\n        this.updateView('disabledView', view);\n        if (this._views.disabledView)\n        {\n            this._views.disabledView.visible = false;\n        }\n    }\n\n    /** Returns the disabled view of the button. */\n    get disabledView(): Container | undefined\n    {\n        return this._views.disabledView;\n    }\n\n    /**\n     * Helper method to update or cleanup button views.\n     * @param { 'defaultView' | 'hoverView' | 'pressedView' | 'disabledView' } viewType - type of the view to update\n     * @param { string | Container | null } view - new view\n     */\n    protected updateView(viewType: ButtonViewType, view: ButtonView | null)\n    {\n        if (view === undefined) return;\n\n        this.removeView(viewType);\n\n        if (view === null)\n        {\n            return;\n        }\n\n        if (this.options?.nineSlicePlane)\n        {\n            if (typeof view === 'string')\n            {\n                this._views[viewType] = new NineSlicePlane(Texture.from(view), ...this.options.nineSlicePlane);\n            }\n            else\n            {\n                console.warn('NineSlicePlane can not be used with views set as Container.');\n            }\n        }\n\n        if (!this._views[viewType])\n        {\n            this._views[viewType] = getView(view);\n        }\n\n        this.setOffset(this._views[viewType], this.state, this.offset);\n\n        if (!this._views[viewType].parent)\n        {\n            this.innerView.addChild(this._views[viewType]);\n        }\n\n        this.updateAnchor();\n\n        if (this._views.iconView)\n        {\n            // place icon on top of the view\n            this.innerView.addChild(this._views.iconView);\n        }\n\n        if (this._views.textView)\n        {\n            // place text on top of the view\n            this.innerView.addChild(this._views.textView);\n        }\n\n        this.setState(this.state, true);\n    }\n\n    /**\n     * Removes button view by type\n     * @param {'defaultView' | 'hoverView' | 'pressedView' | 'disabledView'} viewType - type of the view to remove\n     */\n    removeView(viewType: ButtonViewType | 'textView' | 'iconView')\n    {\n        if (this._views[viewType])\n        {\n            this.innerView.removeChild(this._views[viewType]);\n            this._views[viewType] = null;\n        }\n    }\n\n    /**\n     * Sets the textView of the button.\n     * @param { string | number | PixiText | Text | BitmapText | HTMLText } textView - string, text or pixi text instance.\n     */\n    set textView(textView: AnyText | null)\n    {\n        if (textView === undefined) return;\n\n        this.removeView('textView');\n\n        if (textView === null)\n        {\n            return;\n        }\n\n        this.createTextView(textView);\n    }\n\n    /**\n     * Returns the text view of the button.\n     * @returns pixi text instance or undefined.\n     */\n    get textView(): PixiText | undefined\n    {\n        return this._views.textView;\n    }\n\n    /**\n     * Sets the iconView of the button.\n     * @param { string | Container } view - string (path to the image) or a Container-based view\n     */\n    set iconView(view: ButtonView | null)\n    {\n        if (view === undefined) return;\n\n        this.removeView('iconView');\n\n        if (view === null)\n        {\n            return;\n        }\n\n        this._views.iconView = getView(view);\n\n        if (!this._views.iconView.parent)\n        {\n            this.innerView.addChild(this._views.iconView);\n        }\n\n        this.setState(this.state, true);\n    }\n\n    /** Returns the icon view of the button. */\n    get iconView(): Container | undefined\n    {\n        return this._views.iconView;\n    }\n\n    /**\n     * Starts animation for the current button state if configured.\n     * @param {State} state\n     */\n    protected playAnimations(state: State)\n    {\n        if (!this.animations) return;\n\n        if (state === 'default' && !this.originalInnerViewState)\n        {\n            this.originalInnerViewState = {\n                x: this.innerView.x,\n                y: this.innerView.y,\n                width: this.innerView.width,\n                height: this.innerView.height,\n                scale: {\n                    x: this.innerView.scale.x,\n                    y: this.innerView.scale.y\n                }\n            };\n\n            // first animation state is default, so we don't need to animate it\n            // this part will run only once, during initialization\n            const defaultStateAnimation = this.animations?.default;\n\n            if (defaultStateAnimation)\n            {\n                this.innerView.x = defaultStateAnimation.props.x ?? this.originalInnerViewState.x;\n                this.innerView.y = defaultStateAnimation.props.y ?? this.originalInnerViewState.y;\n                this.innerView.width = defaultStateAnimation.props.width ?? this.originalInnerViewState.width;\n                this.innerView.height = defaultStateAnimation.props.height ?? this.originalInnerViewState.height;\n                this.innerView.scale.x = defaultStateAnimation.props.scale.x ?? this.originalInnerViewState.scale.x;\n                this.innerView.scale.y = defaultStateAnimation.props.scale.y ?? this.originalInnerViewState.scale.y;\n\n                return;\n            }\n        }\n\n        const stateAnimation = this.animations[state] ?? this.animations.default;\n\n        if (stateAnimation)\n        {\n            const data = stateAnimation;\n\n            this.defaultDuration = data.duration;\n\n            new Tween(this.innerView).to(data.props, data.duration).start();\n\n            return;\n        }\n\n        // if there is no animation for the current state, animate the button to the default state\n        new Tween(this.innerView).to(this.originalInnerViewState, this.defaultDuration).start();\n    }\n\n    protected initStateControl()\n    {\n        this.onDown.connect(() =>\n        {\n            this.setState('pressed');\n        });\n\n        this.onUp.connect(() =>\n        {\n            utils.isMobile.any\n                ? this.setState('default')\n                : this.setState('hover');\n        });\n\n        this.onUpOut.connect(() =>\n        {\n            this.setState('default');\n        });\n\n        this.onOut.connect(() =>\n        {\n            if (!this.button.isDown)\n            {\n                this.setState('default');\n            }\n        });\n\n        this.onPress.connect(() =>\n        {\n            utils.isMobile.any\n                ? this.setState('default')\n                : this.setState('hover');\n        });\n\n        this.onHover.connect(() =>\n        {\n            if (!this.button.isDown)\n            {\n                utils.isMobile.any\n                    ? this.setState('default')\n                    : this.setState('hover');\n            }\n        });\n    }\n\n    /**\n     * Sets the button padding.\n     * @param {number} padding - padding of the button text and icon views.\n     */\n    set padding(padding: number)\n    {\n        this._padding = padding;\n\n        this.adjustTextView(this.state);\n        this.adjustIconView(this.state);\n    }\n\n    /** Returns the button padding. */\n    get padding(): number\n    {\n        return this._padding;\n    }\n\n    /**\n     * Sets the button offset.\n     * @param { { x?: number; y?: number } } offset - offset of the button.\n     * Can be set for each state of the button.\n     */\n    set offset(offset: Offset)\n    {\n        this._offset = offset;\n\n        this.updateAnchor();\n    }\n\n    /** Returns the button offset. */\n    get offset(): Offset\n    {\n        return this._offset;\n    }\n\n    /**\n     * Sets the button text offset.\n     * @param { { x?: number; y?: number } } textOffset - offsets of the button text view.\n     * can be set for each state of the button.\n     */\n    set textOffset(textOffset: Offset)\n    {\n        this._textOffset = textOffset;\n\n        this.adjustTextView(this.state);\n    }\n\n    /** Returns the button text offset. */\n    get textOffset(): Offset\n    {\n        return this._textOffset;\n    }\n\n    /**\n     * Sets width of a FancyButtons state views.\n     * If nineSlicePlane is set, then width will be set to nineSlicePlanes of a views.\n     * If nineSlicePlane is not set, then width will control components width as Container.\n     * @param width - Width value.\n     */\n    override set width(width: number)\n    {\n        if (this.options?.nineSlicePlane)\n        {\n            if (this._views.defaultView)\n            {\n                this._views.defaultView.width = width;\n            }\n            if (this._views.hoverView)\n            {\n                this._views.hoverView.width = width;\n            }\n            if (this._views.pressedView)\n            {\n                this._views.pressedView.width = width;\n            }\n            if (this._views.disabledView)\n            {\n                this._views.disabledView.width = width;\n            }\n\n            this.adjustTextView(this.state);\n            this.adjustIconView(this.state);\n            this.updateAnchor();\n        }\n        else\n        {\n            super.width = width;\n        }\n    }\n\n    /** Gets width of a FancyButton. */\n    override get width(): number\n    {\n        return super.width;\n    }\n\n    /**\n     * Sets height of a FancyButtons state views.\n     * If nineSlicePlane is set, then height will be set to nineSlicePlanes of a views.\n     * If nineSlicePlane is not set, then height will control components height as Container.\n     * @param height - Height value.\n     */\n    override set height(height: number)\n    {\n        if (this.options?.nineSlicePlane)\n        {\n            if (this._views.defaultView)\n            {\n                this._views.defaultView.height = height;\n            }\n            if (this._views.hoverView)\n            {\n                this._views.hoverView.height = height;\n            }\n            if (this._views.pressedView)\n            {\n                this._views.pressedView.height = height;\n            }\n            if (this._views.disabledView)\n            {\n                this._views.disabledView.height = height;\n            }\n\n            this.adjustTextView(this.state);\n            this.adjustIconView(this.state);\n            this.updateAnchor();\n        }\n        else\n        {\n            super.height = height;\n        }\n    }\n\n    /** Gets height of a FancyButton. */\n    override get height(): number\n    {\n        return super.height;\n    }\n}\n","import { Texture, utils, Ticker } from '@pixi/core';\nimport { Container, IDestroyOptions } from '@pixi/display';\nimport { Sprite } from '@pixi/sprite';\nimport { TextStyle, Text } from '@pixi/text';\nimport { Signal } from 'typed-signals';\nimport { getView } from './utils/helpers/view';\nimport { Padding } from './utils/HelpTypes';\nimport { NineSlicePlane } from '@pixi/mesh-extras';\nimport { Graphics } from '@pixi/graphics';\n\ntype ViewType = Sprite | Graphics | string;\n\nexport type InputOptions = {\n    bg: ViewType;\n    textStyle?: Partial<TextStyle>;\n    placeholder?: string;\n    value?: string;\n    maxLength?: number;\n    align?: 'left' | 'center' | 'right';\n    padding?: Padding;\n    cleanOnFocus?: boolean;\n    nineSlicePlane?: [number, number, number, number];\n};\n\n/**\n * Container-based component that creates an input to read the user's text.\n * @example\n * new Input({\n *     bg: Sprite.from('input.png'),\n *     placeholder: 'Enter text',\n *     padding: {\n *      top: 11,\n *      right: 11,\n *      bottom: 11,\n *      left: 11\n *     } // alternatively you can use [11, 11, 11, 11] or [11, 11] or just 11\n * });\n */\nexport class Input extends Container\n{\n    protected _bg?: Container | NineSlicePlane | Graphics;\n    protected inputMask: Container | NineSlicePlane | Graphics;\n    protected _cursor: Sprite;\n    protected inputField: Text;\n    protected placeholder: Text;\n    protected editing = false;\n    protected tick = 0;\n\n    protected activation = false;\n    protected readonly options: InputOptions;\n    protected input: HTMLInputElement;\n\n    protected handleActivationBinding = this.handleActivation.bind(this);\n    protected onKeyUpBinding = this.onKeyUp.bind(this);\n    protected stopEditingBinding = this.stopEditing.bind(this);\n\n    /** Fires when input loses focus. */\n    onEnter: Signal<(text: string) => void>;\n\n    /** Fires every time input string is changed. */\n    onChange: Signal<(text: string) => void>;\n\n    /** Top side padding */\n    paddingTop = 0;\n\n    /** Right side padding */\n    paddingRight = 0;\n\n    /** Bottom side padding */\n    paddingBottom = 0;\n\n    /** Left side padding */\n    paddingLeft = 0;\n\n    /**\n     * Creates an input.\n     * @param { number } options - Options object to use.\n     * @param { Sprite | Graphics | string } options.bg - Background of the Input.\n     * @param { Partial<TextStyle> } options.textStyle - Text style of the Input.\n     * @param { string } options.placeholder - Placeholder of the Input.\n     * @param { string } options.value - Value of the Input.\n     * @param { number } options.maxLength - Max length of the Input.\n     * @param { 'left' | 'center' | 'right' } options.align - Align of the Input.\n     * @param { Padding } options.padding - Padding of the Input.\n     * @param { number } options.padding.top - Top padding of the Input.\n     * @param { number } options.padding.right - Right padding of the Input.\n     * @param { number } options.padding.bottom - Bottom padding of the Input.\n     * @param { number } options.padding.left - Left padding of the Input.\n     * @param { boolean } options.cleanOnFocus - Clean Input on focus.\n     * @param { Array } options.nineSlicePlane - NineSlicePlane values for bg and fill ([number, number, number, number]).\n     */\n    constructor(options: InputOptions)\n    {\n        super();\n\n        this.options = options;\n\n        this.options = options;\n        this.padding = options.padding;\n\n        this.cursor = 'text';\n        this.interactive = true;\n\n        this.on('pointertap', () =>\n        {\n            this.activation = true;\n            utils.isMobile.any && this.handleActivation(); // handleActivation always call before this function called.\n        });\n\n        if (utils.isMobile.any)\n        {\n            window.addEventListener('touchstart', this.handleActivationBinding);\n        }\n        else if (!utils.isMobile.any)\n        {\n            window.addEventListener('click', this.handleActivationBinding);\n\n            window.addEventListener('keyup', this.onKeyUpBinding);\n        }\n\n        this.onEnter = new Signal();\n        this.onChange = new Signal();\n\n        Ticker.shared.add((delta) => this.update(delta));\n\n        if (options.bg)\n        {\n            this.bg = options.bg;\n        }\n        else\n        {\n            console.error('Input: bg is not defined, please define it.');\n        }\n    }\n\n    protected onKeyUp(e: KeyboardEvent)\n    {\n        const key = e.key;\n\n        if (key === 'Backspace')\n        {\n            this._delete();\n        }\n        else if (key === 'Escape' || key === 'Enter')\n        {\n            this.stopEditing();\n        }\n        else if (key.length === 1) this._add(key);\n    }\n\n    protected init()\n    {\n        const options = this.options;\n\n        const defaultTextStyle = {\n            fill: 0x000000,\n            align: 'center'\n        } as TextStyle;\n\n        this.options.textStyle = options.textStyle ?? defaultTextStyle;\n\n        const textStyle = new TextStyle(options.textStyle ?? defaultTextStyle);\n\n        this.inputField = new Text('', textStyle);\n\n        this._cursor = new Sprite(Texture.WHITE);\n        this._cursor.tint = Number(options.textStyle.fill) || 0x000000;\n        this._cursor.anchor.set(0.5);\n        this._cursor.width = 2;\n        this._cursor.height = this.inputField.height * 0.8;\n        this._cursor.alpha = 0;\n\n        this.placeholder = new Text(options.placeholder, textStyle ?? defaultTextStyle);\n        this.placeholder.visible = !!options.placeholder;\n\n        this.addChild(this.inputField, this.placeholder, this._cursor);\n\n        this.value = options.value ?? '';\n\n        this.align();\n    }\n\n    set bg(bg: ViewType)\n    {\n        if (this._bg)\n        {\n            this._bg.destroy();\n        }\n\n        if (this.options?.nineSlicePlane)\n        {\n            if (typeof bg === 'string')\n            {\n                this._bg = new NineSlicePlane(Texture.from(bg), ...this.options.nineSlicePlane);\n            }\n            else\n            {\n                console.warn('NineSlicePlane can not be used with views set as Container.');\n            }\n        }\n\n        if (!this._bg)\n        {\n            this._bg = getView(bg);\n        }\n\n        this._bg.cursor = 'text';\n        this._bg.interactive = true;\n\n        this.addChildAt(this._bg, 0);\n\n        if (!this.inputField)\n        {\n            this.init();\n        }\n\n        if (this.inputMask)\n        {\n            this.inputField.mask = null;\n            this._cursor.mask = null;\n            this.inputMask.destroy();\n        }\n\n        if (this.options?.nineSlicePlane && typeof bg === 'string')\n        {\n            this.inputMask = new NineSlicePlane(Texture.from(bg), ...this.options.nineSlicePlane);\n        }\n        else\n            if (bg instanceof Sprite)\n            {\n                this.inputMask = new Sprite(bg.texture);\n            }\n            else\n                if (bg instanceof Graphics)\n                {\n                    this.inputMask = bg.clone();\n                }\n                else\n                {\n                    this.inputMask = getView(bg);\n                }\n\n        this.inputField.mask = this.inputMask;\n\n        this._cursor.mask = this.inputMask;\n\n        this.addChildAt(this.inputMask, 0);\n    }\n\n    get bg(): Container | string\n    {\n        return this._bg;\n    }\n\n    protected _add(key: string): void\n    {\n        if (!this.editing)\n        {\n            return;\n        }\n\n        if (this.options.maxLength && this.value.length >= this.options.maxLength)\n        {\n            return;\n        }\n\n        this.value = this.value + key;\n\n        this.onChange.emit(this.value);\n    }\n\n    protected _delete(): void\n    {\n        if (!this.editing || this.value.length === 0) return;\n        const array = this.value.split('');\n\n        array.pop();\n        this.value = array.join('');\n\n        this.onChange.emit(this.value);\n    }\n\n    protected _startEditing(): void\n    {\n        if (this.options.cleanOnFocus)\n        {\n            this.value = '';\n        }\n\n        this.tick = 0;\n        this.editing = true;\n        this.placeholder.visible = false;\n        this._cursor.alpha = 1;\n\n        if (utils.isMobile.any)\n        {\n            this.createInputField();\n        }\n\n        this.align();\n    }\n\n    protected createInputField()\n    {\n        if (this.input)\n        {\n            this.input.removeEventListener('blur', this.stopEditingBinding);\n            this.input.removeEventListener('keyup', this.onKeyUpBinding);\n\n            this.input?.blur();\n            this.input?.remove();\n            this.input = null;\n        }\n\n        const input: HTMLInputElement = document.createElement('input');\n\n        document.body.appendChild(input);\n\n        input.setAttribute('inputmode', 'decimal');\n\n        input.style.position = 'fixed';\n        input.style.left = `${this.getGlobalPosition().x}px`;\n        input.style.top = `${this.getGlobalPosition().y}px`;\n        input.style.opacity = '0.0000001';\n        input.style.width = `${this._bg.width}px`;\n        input.style.height = `${this._bg.height}px`;\n        input.style.border = 'none';\n        input.style.outline = 'none';\n        input.style.background = 'white';\n\n        // This hack fixes instant hiding keyboard on mobile after showing it\n        if (utils.isMobile.android.device)\n        {\n            setTimeout(() =>\n            {\n                input.focus();\n                input.click();\n            }, 100);\n        }\n        else\n        {\n            input.focus();\n            input.click();\n        }\n\n        input.addEventListener('blur', this.stopEditingBinding);\n        input.addEventListener('keyup', this.onKeyUpBinding);\n\n        this.input = input;\n\n        this.align();\n    }\n\n    protected handleActivation()\n    {\n        this.stopEditing();\n\n        if (this.activation)\n        {\n            this._startEditing();\n\n            this.activation = false;\n        }\n    }\n\n    protected stopEditing(): void\n    {\n        if (!this.editing) return;\n\n        this._cursor.alpha = 0;\n        this.editing = false;\n\n        if (this.inputField.text === '')\n        {\n            this.placeholder.visible = true;\n        }\n\n        if (this.value.length === 0) this.placeholder.visible = true;\n\n        if (utils.isMobile.any)\n        {\n            this.input?.blur();\n            this.input?.remove();\n            this.input = null;\n        }\n\n        this.align();\n\n        this.onEnter.emit(this.value);\n    }\n\n    protected update(dt: number): void\n    {\n        if (!this.editing) return;\n        this.tick += dt * 0.1;\n        this._cursor.alpha = Math.round((Math.sin(this.tick) * 0.5) + 0.5);\n    }\n\n    protected align()\n    {\n        if (!this._bg) return;\n\n        const align = this.getAlign();\n\n        this.inputField.anchor.set(align, 0.5);\n        this.inputField.x = (this._bg.width * align) + (align === 1 ? -this.paddingRight : this.paddingLeft);\n        this.inputField.y = (this._bg.height / 2) + this.paddingTop - this.paddingBottom;\n\n        this.placeholder.anchor.set(align, 0.5);\n        this.placeholder.x = (this._bg.width * align) + (align === 1 ? -this.paddingRight : this.paddingLeft);\n        this.placeholder.y = this._bg.height / 2;\n\n        this._cursor.x = this.getCursorPosX();\n        this._cursor.y = this.inputField.y;\n    }\n\n    protected getAlign(): 0 | 1 | 0.5\n    {\n        const maxWidth = this._bg.width * 0.95;\n        const paddings = this.paddingLeft + this.paddingRight - 10;\n        const isOverflowed = this.inputField.width + paddings > maxWidth;\n\n        if (isOverflowed)\n        {\n            return this.editing ? 1 : 0;\n        }\n        switch (this.options.align)\n        {\n            case 'left':\n                return 0;\n            case 'center':\n                return 0.5;\n            case 'right':\n                return 1;\n            default:\n                return 0;\n        }\n    }\n\n    protected getCursorPosX()\n    {\n        const align = this.getAlign();\n\n        switch (align)\n        {\n            case 0:\n                return this.inputField.x + this.inputField.width;\n            case 0.5:\n                return this.inputField.x + (this.inputField.width * 0.5);\n            case 1:\n                return this.inputField.x;\n            default:\n                return 0;\n        }\n    }\n\n    /** Sets the input text. */\n    set value(text: string)\n    {\n        this.inputField.text = text;\n\n        if (text.length !== 0)\n        {\n            this.placeholder.visible = false;\n        }\n        else\n        {\n            this.placeholder.visible = !this.editing;\n        }\n\n        this.align();\n    }\n\n    /** Return text of the input. */\n    get value(): string\n    {\n        return this.inputField.text;\n    }\n\n    /**\n     * Set paddings\n     * @param value - number, array of 4 numbers or object with keys: top, right, bottom, left\n     * or: [top, right, bottom, left]\n     * or: [top&bottom, right&left]\n     * or: {\n     *  left: 10,\n     *  right: 10,\n     *  top: 10,\n     *  bottom: 10,\n     * }\n     */\n    set padding(value: Padding)\n    {\n        if (typeof value === 'number')\n        {\n            this.paddingTop = value;\n            this.paddingRight = value;\n            this.paddingBottom = value;\n            this.paddingLeft = value;\n        }\n\n        if (Array.isArray(value))\n        {\n            this.paddingTop = value[0] ?? 0;\n            this.paddingRight = value[1] ?? value[0] ?? 0;\n            this.paddingBottom = value[2] ?? value[0] ?? 0;\n            this.paddingLeft = value[3] ?? value[1] ?? value[0] ?? 0;\n        }\n        else if (typeof value === 'object')\n        {\n            this.paddingTop = value.top ?? 0;\n            this.paddingRight = value.right ?? 0;\n            this.paddingBottom = value.bottom ?? 0;\n            this.paddingLeft = value.left ?? 0;\n        }\n    }\n\n    // Return array of paddings [top, right, bottom, left]\n    get padding(): [number, number, number, number]\n    {\n        return [this.paddingTop, this.paddingRight, this.paddingBottom, this.paddingLeft];\n    }\n\n    override destroy(options?: IDestroyOptions | boolean)\n    {\n        this.off('pointertap');\n\n        if (utils.isMobile.any)\n        {\n            window.removeEventListener('touchstart', this.handleActivationBinding);\n        }\n        else if (!utils.isMobile.any)\n        {\n            window.removeEventListener('click', this.handleActivationBinding);\n\n            window.removeEventListener('keyup', this.onKeyUpBinding);\n        }\n\n        super.destroy(options);\n    }\n\n    /**\n     * Sets width of a Input.\n     * If nineSlicePlane is set, then width will be set to nineSlicePlane.\n     * If nineSlicePlane is not set, then width will control components width as Container.\n     * @param width - Width value.\n     */\n    override set width(width: number)\n    {\n        if (this.options?.nineSlicePlane)\n        {\n            if (this._bg)\n            {\n                this._bg.width = width;\n            }\n\n            if (this.inputMask)\n            {\n                this.inputMask.width = width - this.paddingLeft - this.paddingRight;\n                this.inputMask.x = this.paddingLeft;\n            }\n\n            this.align();\n        }\n        else\n        {\n            super.width = width;\n        }\n    }\n\n    /** Gets width of Input. */\n    override get width(): number\n    {\n        return super.width;\n    }\n\n    /**\n     * Sets height of a Input.\n     * If nineSlicePlane is set, then height will be set to nineSlicePlane.\n     * If nineSlicePlane is not set, then height will control components height as Container.\n     * @param height - Height value.\n     */\n    override set height(height: number)\n    {\n        if (this.options?.nineSlicePlane)\n        {\n            if (this._bg)\n            {\n                this._bg.height = height;\n            }\n\n            if (this.inputMask)\n            {\n                this.inputMask.height = height - this.paddingTop - this.paddingBottom;\n                this.inputMask.y = this.paddingTop;\n            }\n\n            this.align();\n        }\n        else\n        {\n            super.height = height;\n        }\n    }\n\n    /** Gets height of Input. */\n    override get height(): number\n    {\n        return super.height;\n    }\n}\n","import { Container } from '@pixi/display';\n\nexport type ListType = 'horizontal' | 'vertical';\n\nexport type ListOptions = {\n    elementsMargin?: number;\n    children?: Container[];\n    vertPadding?: number;\n    horPadding?: number;\n    items?: Container[];\n};\n\n/**\n * Container-based component for arranging Pixi containers one after another based on their sizes.\n *\n * Type option is used to set the direction of the arrangement.\n *\n * If type is not specified, it will be acting like a bidirectional, items will be arranged to fit horizontally,\n * after there is no space left, new line will be started, so items will be arranged like `inline-block` in css.\n *\n * It is used inside elements with repeatable content, like {@link Select} or {@link ScrollBox}.\n * @example\n * const list = new List({\n *    children: [\n        new Graphics().beginFill(0x000000).drawRect(0, 0, 50, 50),\n        new Graphics().beginFill(0xFFFFFF).drawRect(0, 0, 50, 50),\n *    ],\n * });\n *\n * list.addChild(new Graphics().beginFill(0x000000).drawRect(0, 0, 50, 50));\n */\nexport class List extends Container\n{\n    protected options?: { type?: ListType } & ListOptions;\n\n    /** Container, that holds all inner elements. */\n    view: Container;\n\n    /** Arrange direction. */\n    protected _type: ListType;\n\n    /** Returns all arranged elements. */\n    override readonly children: Container[] = [];\n\n    constructor(options?: { type?: ListType } & ListOptions)\n    {\n        super();\n\n        if (options)\n        {\n            this.init(options);\n        }\n\n        options?.items?.forEach((item) => this.addChild(item));\n\n        this.on('added', () => this.arrangeChildren());\n        this.on('childAdded', () => this.arrangeChildren());\n    }\n\n    /**\n     * Initiates list component.\n     * @param options\n     */\n    init(options?: { type?: ListType } & ListOptions)\n    {\n        this.options = options;\n\n        if (options?.type)\n        {\n            this.type = options.type;\n        }\n\n        if (options?.children)\n        {\n            options.children.forEach((child) => this.addChild(child));\n        }\n    }\n\n    /**\n     * Set items arrange direction.\n     * @param type - Arrange direction.\n     */\n    set type(type: ListType)\n    {\n        this._type = type;\n        this.arrangeChildren();\n    }\n\n    /**\n     * Get items arrange direction.\n     * @returns Arrange direction.\n     */\n    get type(): ListType\n    {\n        return this._type;\n    }\n\n    /**\n     * Set element margin.\n     * @param margin - Margin between elements.\n     */\n    set elementsMargin(margin: number)\n    {\n        this.options.elementsMargin = margin;\n        this.arrangeChildren();\n    }\n\n    /**\n     * Get element margin.\n     * @returns Margin between elements.\n     */\n    get elementsMargin(): number\n    {\n        return this.options.elementsMargin;\n    }\n\n    /**\n     * Set vertical padding.\n     * @param padding - Vertical padding between list border and its elements.\n     */\n    set vertPadding(padding: number)\n    {\n        this.options.vertPadding = padding;\n        this.arrangeChildren();\n    }\n\n    /**\n     * Get vertical padding.\n     * @returns Vertical padding between list border and its elements.\n     */\n    get vertPadding(): number\n    {\n        return this.options.vertPadding;\n    }\n\n    /**\n     * Set horizontal padding.\n     * @param padding - Horizontal padding between list border and its elements.\n     */\n    set horPadding(padding: number)\n    {\n        this.options.horPadding = padding;\n        this.arrangeChildren();\n    }\n\n    /**\n     * Get horizontal padding.\n     * @returns Horizontal padding between list border and its elements.\n     */\n    get horPadding(): number\n    {\n        return this.options.horPadding;\n    }\n\n    /**\n     * Arrange all elements basing in their sizes and component options.\n     * Can be arranged vertically, horizontally or bidirectional.\n     */\n    protected arrangeChildren()\n    {\n        let x = this.options?.horPadding ?? 0;\n        let y = this.options?.vertPadding ?? 0;\n\n        const elementsMargin = this.options?.elementsMargin ?? 0;\n        let maxWidth = this.parent?.width;\n\n        if (this.options?.horPadding)\n        {\n            maxWidth -= this.options.horPadding;\n        }\n\n        this.children.forEach((child, id) =>\n        {\n            switch (this.type)\n            {\n                case 'vertical':\n                    child.y = y;\n                    child.x = x;\n\n                    y += elementsMargin + child.height;\n                    break;\n\n                case 'horizontal':\n                    child.x = x;\n                    child.y = y;\n\n                    x += elementsMargin + child.width;\n                    break;\n\n                default: // bidirectional\n                    child.x = x;\n                    child.y = y;\n\n                    if (child.x + child.width >= maxWidth && id > 0)\n                    {\n                        y += elementsMargin + child.height;\n                        x = this.options?.horPadding ?? 0;\n\n                        child.x = x;\n                        child.y = y;\n                    }\n\n                    x += elementsMargin + child.width;\n                    break;\n            }\n        });\n    }\n}\n","import { Container } from '@pixi/display';\nimport { Graphics } from '@pixi/graphics';\nimport { Sprite } from '@pixi/sprite';\nimport { getView } from './utils/helpers/view';\n\nexport type MaskedFrameOptions = {\n    target?: string | Container;\n    mask?: string | Graphics;\n    borderWidth?: number;\n    borderColor?: number;\n};\n\n/**\n * Draws a border or apply a mask of any shape to a container.\n * @example\n * new MaskedFrame({\n *     target: `avatar.png`,\n *     mask: `avatar_mask.png`,\n *     borderWidth: 5,\n *     borderColor: 0xFFFFFF,\n * });\n */\nexport class MaskedFrame extends Graphics\n{\n    /** Target container. */\n    target: Container;\n\n    protected _targetMask: Container;\n    protected maskData: string | Graphics;\n    protected borderWidth: number;\n    protected borderColor: number;\n\n    constructor(options?: MaskedFrameOptions)\n    {\n        super();\n\n        if (options?.target)\n        {\n            this.init(options);\n        }\n    }\n\n    /**\n     * Initializes a component.\n     * @param root0\n     * @param root0.target - Container to apply a mask or a border.\n     * @param root0.mask - Mask.\n     * @param root0.borderWidth - Border width.\n     * @param root0.borderColor - Border color.\n     */\n    init({ target, mask, borderWidth, borderColor }: MaskedFrameOptions)\n    {\n        if (this.target)\n        {\n            this.removeChild(this.target);\n        }\n\n        this.target = getView(target);\n        this.addChild(this.target);\n\n        if (mask) this.setMask(mask);\n        if (borderWidth) this.setBorder(borderWidth, borderColor);\n    }\n\n    /**\n     * Applies a mask to a target container.\n     * @param mask\n     */\n    setMask(mask: string | Graphics)\n    {\n        this.maskData = mask;\n\n        this._targetMask = getView(mask);\n        this.target.addChild(this._targetMask);\n        this.target.mask = this._targetMask;\n    }\n\n    /**\n     * Shows a border around the target Container, same shape as the mask.\n     * @param borderWidth\n     * @param borderColor\n     */\n    setBorder(borderWidth: number, borderColor: number)\n    {\n        this.borderWidth = borderWidth;\n        this.borderColor = borderColor;\n\n        this.showBorder();\n\n        const borderMask = typeof this.maskData === 'string' ? Sprite.from(this.maskData) : this.maskData.clone();\n\n        borderMask.width += borderWidth * 2;\n        borderMask.height += borderWidth * 2;\n\n        this.mask = borderMask;\n        this.addChild(borderMask);\n    }\n\n    /** Hides a border. */\n    showBorder()\n    {\n        const width = this.borderWidth * 2;\n\n        this.clear()\n            .beginFill(this.borderColor)\n            .drawRect(0, 0, this.target.width + width, this.target.height + width);\n\n        this.target.x = this.borderWidth;\n        this.target.y = this.borderWidth;\n    }\n\n    /** Hides a border. */\n    hideBorder()\n    {\n        this.clear();\n    }\n}\n","import { Container } from '@pixi/display';\nimport { Signal } from 'typed-signals';\nimport { CheckBox } from './CheckBox';\nimport { List, ListType } from './List';\n\nexport type RadioBoxOptions = {\n    items: CheckBox[];\n    type: ListType;\n    elementsMargin: number;\n    selectedItem?: number;\n};\n\n/**\n * Creates a container-based controlling wrapper for checkbox elements,\n * for them top behave as radio buttons.\n *\n * Only one checkbox/radio button can be selected at a time.\n *\n * List of items is passed as an array of {@link CheckBox} objects.\n * @example\n * new RadioGroup({\n *     items: [\n *          new CheckBox({\n *              style: {\n *                  unchecked: `switch_off.png`,\n *                  checked: `switch_on.png`,\n *              }\n *          }),\n *         new CheckBox({\n *              style: {\n *                  unchecked: `switch_off.png`,\n *                  checked: `switch_on.png`,\n *              }\n *          }),\n *          new CheckBox({\n *              style: {\n *                  unchecked: `switch_off.png`,\n *                  checked: `switch_on.png`,\n *              }\n *          }),\n *     ],\n *     type: 'vertical'\n * });\n */\nexport class RadioGroup extends Container\n{\n    protected items: CheckBox[] = [];\n\n    /** {@link List}, that holds and control all inned checkboxes.  */\n    innerView: List;\n\n    /** Text value of the selected item. */\n    value: string;\n\n    /** ID of the selected item. */\n    selected: number;\n\n    /** Fires, when new item is selected. */\n    onChange: Signal<(selectedItemID: number, selectedVal: string) => void>;\n\n    protected options: RadioBoxOptions;\n\n    constructor(options?: RadioBoxOptions)\n    {\n        super();\n\n        if (options)\n        {\n            this.init(options);\n        }\n\n        this.onChange = new Signal();\n    }\n\n    /**\n     * Initiates a group.\n     * @param options\n     */\n    init(options: RadioBoxOptions)\n    {\n        this.options = options;\n\n        this.value = options.items[options.selectedItem || 0].label.text;\n\n        this.selected = options.selectedItem ?? 0; // first item by default\n\n        if (this.innerView)\n        {\n            this.innerView.type = options.type;\n            this.innerView.elementsMargin = options.elementsMargin;\n        }\n        else\n        {\n            this.innerView = new List({\n                type: options.type,\n                elementsMargin: options.elementsMargin\n            });\n        }\n\n        this.addItems(options.items);\n\n        this.addChild(this.innerView);\n\n        this.selectItem(this.selected);\n    }\n\n    /**\n     * Add items to a group.\n     * @param {CheckBox[]} items - array of {@link CheckBox} instances.\n     */\n    addItems(items: CheckBox[])\n    {\n        items.forEach((checkBox, id) =>\n        {\n            checkBox.onChange.connect(() => this.selectItem(id));\n\n            this.items.push(checkBox);\n\n            this.innerView.addChild(checkBox);\n        });\n    }\n\n    /**\n     * Remove items from a group.\n     * @param ids\n     */\n    removeItems(ids: number[])\n    {\n        ids.forEach((id) =>\n        {\n            const item = this.items[id];\n\n            if (!item) return;\n\n            item.onChange.disconnectAll();\n\n            this.innerView.removeChild(item);\n\n            this.items.splice(id, 1);\n        });\n    }\n\n    /**\n     * Select item by ID.\n     * @param id\n     */\n    selectItem(id: number)\n    {\n        this.items.forEach((item, key) =>\n        {\n            item.forceCheck(key === id);\n        });\n\n        if (this.selected !== id)\n        {\n            this.onChange.emit(id, this.items[id].label.text);\n        }\n\n        this.value = this.options.items[id].label.text;\n        this.selected = id;\n    }\n}\n","export interface SpringOptions\n{\n    max?: number;\n    damp?: number;\n    springiness?: number;\n}\n\nexport class Spring\n{\n    x: number;\n    ax: number;\n    dx: number;\n    tx: number;\n\n    protected _options: SpringOptions;\n\n    constructor(options: SpringOptions = {})\n    {\n        this.x = 0;\n        this.ax = 0;\n        this.dx = 0;\n        this.tx = 0;\n\n        // add opts to object for shared opts.\n        this._options = options;\n        this._options.max = options.max || 160;\n        this._options.damp = options.damp || 0.8;\n        this._options.springiness = options.springiness || 0.1;\n    }\n\n    update(): void\n    {\n        this.ax = (this.tx - this.x) * this._options.springiness;\n\n        this.dx += this.ax;\n        this.dx *= this._options.damp;\n\n        if (this.dx < -this._options.max) this.dx = -this._options.max;\n        else if (this.dx > this._options.max) this.dx = this._options.max;\n\n        this.x += this.dx;\n    }\n\n    reset(): void\n    {\n        this.x = 0;\n        this.ax = 0;\n        this.dx = 0;\n        this.tx = 0;\n    }\n\n    get max(): number\n    {\n        return this._options.max;\n    }\n\n    set max(value: number)\n    {\n        this._options.max = value;\n    }\n\n    get damp(): number\n    {\n        return this._options.damp;\n    }\n\n    set damp(value: number)\n    {\n        this._options.damp = value;\n    }\n\n    get springiness(): number\n    {\n        return this._options.springiness;\n    }\n\n    set springiness(value: number)\n    {\n        this._options.springiness = value;\n    }\n}\n","import { Spring } from './Spring';\n\nexport default class ScrollSpring\n{\n    done: boolean;\n    to: number;\n\n    protected _spring: Spring;\n    protected _pos: number;\n    protected _speed: number;\n    protected _correctSpeed: boolean;\n\n    constructor()\n    {\n        this._spring = new Spring();\n        this._pos = 0;\n        this.to = 0;\n    }\n\n    start(speed: number, pos: number, to: number): void\n    {\n        this._speed = speed;\n        this._pos = pos;\n        this.to = to;\n        this.done = false;\n\n        this._spring.x = this._pos;\n        this._spring.tx = this.to;\n\n        const diff = this.to - this._pos;\n        const toDirection = Math.abs(diff) / diff;\n        const currentDirection = Math.abs(this._speed) / this._speed;\n\n        if (toDirection !== currentDirection)\n        {\n            this._correctSpeed = true;\n        }\n        else\n        {\n            this._correctSpeed = false;\n        }\n    }\n\n    update(): number\n    {\n        if (this._correctSpeed)\n        {\n            this._speed *= 0.6;\n\n            if (Math.abs(this._speed) < 2)\n            {\n                this._correctSpeed = false;\n            }\n\n            this._pos += this._speed;\n\n            this._spring.x = this._pos;\n        }\n        else\n        {\n            const diff = this.to - this._pos;\n\n            if (Math.abs(diff) < 0.05)\n            {\n                this._pos = this.to;\n                this.done = true;\n            }\n            else\n            {\n                this._spring.tx = this.to;\n                this._spring.update();\n                this._pos = this._spring.x;\n            }\n        }\n\n        return this._pos;\n    }\n\n    cancel(): void\n    {\n    // matches jux interface\n    }\n}\n","import ScrollSpring from './ScrollSpring';\n\nexport interface SlidingNumberOptions\n{\n    constrain?: boolean;\n    maxSpeed?: number;\n    ease?: ConstrainEase;\n}\n\nexport interface ConstrainEase\n{\n    done: boolean;\n    to: number;\n    start(speed: number, pos: number, to: number): void;\n    update(): number;\n}\n\nexport class SlidingNumber\n{\n    position = 0;\n    constrain = true;\n    min = 0; // the window width of the drag\n    max = 0; // the window width of the drag\n    maxSpeed = 400;\n\n    protected _ease: ConstrainEase;\n\n    protected _offset = 0;\n    protected _prev = 0;\n    protected _speed = 0;\n    protected _hasStopped: boolean;\n\n    protected _targetSpeed = 0;\n    protected _speedChecker = 0;\n    protected _grab = 0;\n    protected _activeEase: ConstrainEase;\n\n    constructor(options: SlidingNumberOptions = {})\n    {\n        this.constrain = options.constrain ?? true;\n        this.maxSpeed = options.maxSpeed ?? 400;\n        this._ease = options.ease ?? new ScrollSpring();\n    }\n\n    set value(n: number)\n    {\n        this._speed = 0;\n        this.position = n;\n    }\n\n    get value(): number\n    {\n        return this.position;\n    }\n\n    grab(offset: number): void\n    {\n        this._grab = offset;\n        this._offset = this.position - offset;\n        this._speedChecker = 0;\n        this._targetSpeed = this._speed = 0;\n        this._hasStopped = false;\n    }\n\n    hold(newPosition: number): void\n    {\n        this._speedChecker++;\n\n        this.position = newPosition + this._offset;\n\n        if (this._speedChecker > 1)\n        {\n            this._targetSpeed = this.position - this._prev;\n        }\n\n        this._speed += (this._targetSpeed - this._speed) / 2;\n\n        if (this._speed > this.maxSpeed) this._speed = this.maxSpeed;\n        else if (this._speed < -this.maxSpeed) this._speed = -this.maxSpeed;\n\n        this._prev = this.position;\n\n        if (this.constrain)\n        {\n            this._activeEase = null;\n\n            if (this.position > this.min)\n            {\n                this.position -= (this.position - this.min) / 1.5;\n            }\n            else if (this.position < this.max)\n            {\n                this.position += (this.max - this.position) / 1.5;\n            }\n        }\n    }\n\n    slide(instant = false): void\n    {\n        if (this._hasStopped) return;\n\n        if (this.constrain)\n        {\n            this._updateConstrain(instant);\n        }\n        else\n        {\n            this._updateDefault();\n        }\n    }\n\n    get moveAmount(): number\n    {\n        return -(this.position - this._offset - this._grab);\n    }\n\n    protected _updateDefault(): void\n    {\n        this._speed *= 0.9;\n        this.position += this._speed;\n\n        if ((this._speed < 0 ? this._speed * -1 : this._speed) < 0.01)\n        {\n            this._hasStopped = true;\n        }\n    }\n\n    protected _updateConstrain(instant = false): void\n    {\n        const max: number = this.max;\n\n        if (instant)\n        {\n            if (this.value > 0)\n            {\n                this.value = 0;\n            }\n\n            if (this.value > 0)\n            {\n                this.value = 0;\n            }\n\n            if (this.value < this.max)\n            {\n                this.value = this.max;\n            }\n\n            if (this.value < this.max)\n            {\n                this.value = this.max;\n            }\n        }\n        else if (this.position > this.min || this.position < max || this._activeEase)\n        {\n            if (!this._activeEase)\n            {\n                this._activeEase = this._ease;\n\n                if (this.position > this.min)\n                {\n                    this._activeEase.start(this._speed, this.position, this.min);\n                }\n                else\n                {\n                    this._activeEase.start(this._speed, this.position, max);\n                }\n            }\n\n            this.position = this._activeEase.update();\n\n            if (this._activeEase.done)\n            {\n                this.position = this._activeEase.to;\n                this._speed = 0;\n                this._activeEase = null;\n            }\n        }\n        else\n        {\n            this._updateDefault();\n        }\n    }\n}\n","import { Point, Rectangle } from '@pixi/core';\nimport { ConstrainEase, SlidingNumber } from './SlidingNumber';\n\ninterface TrackpadOptions\n{\n    /** override the easing function when constraining */\n    xEase?: ConstrainEase;\n    yEase?: ConstrainEase;\n\n    maxSpeed?: number;\n    constrain?: boolean;\n\n    disableEasing?: boolean;\n}\n\n/** Easing controller for the {@link ScrollBox}. */\nexport class Trackpad\n{\n    xAxis: SlidingNumber;\n    yAxis: SlidingNumber;\n\n    protected _isDown: boolean;\n    protected _globalPosition: Point;\n    protected _frame: Rectangle;\n    protected _bounds: Rectangle;\n    protected _dirty: boolean;\n    protected disableEasing = false;\n\n    constructor(options: TrackpadOptions)\n    {\n        this.xAxis = new SlidingNumber({\n            ease: options.xEase,\n            maxSpeed: options.maxSpeed,\n            constrain: options.constrain\n        });\n\n        this.yAxis = new SlidingNumber({\n            ease: options.yEase,\n            maxSpeed: options.maxSpeed,\n            constrain: options.constrain\n        });\n\n        this.disableEasing = options.disableEasing ?? false;\n\n        this._frame = new Rectangle();\n\n        this._bounds = new Rectangle();\n        this._globalPosition = new Point();\n    }\n\n    pointerDown(pos: Point): void\n    {\n        this._globalPosition = pos;\n        this.xAxis.grab(pos.x);\n        this.yAxis.grab(pos.y);\n        this._isDown = true;\n    }\n\n    pointerUp(): void\n    {\n        this._isDown = false;\n    }\n\n    pointerMove(pos: Point): void\n    {\n        this._globalPosition = pos;\n    }\n\n    update(): void\n    {\n        if (this._dirty)\n        {\n            this._dirty = false;\n\n            this.xAxis.min = this._bounds.left;\n            this.xAxis.min = this._bounds.right - this._frame.width;\n\n            this.xAxis.min = this._bounds.top;\n            this.xAxis.min = this._bounds.bottom - this._frame.height;\n        }\n\n        if (this._isDown)\n        {\n            this.xAxis.hold(this._globalPosition.x);\n            this.yAxis.hold(this._globalPosition.y);\n        }\n        else\n        {\n            this.xAxis.slide(this.disableEasing);\n            this.yAxis.slide(this.disableEasing);\n        }\n    }\n\n    resize(w: number, h: number): void\n    {\n        this._frame.x = 0;\n        this._frame.width = w;\n\n        this._frame.y = 0;\n        this._frame.height = h;\n\n        this._dirty = true;\n    }\n\n    setBounds(minX: number, maxX: number, minY: number, maxY: number): void\n    {\n        this._bounds.x = minX;\n        this._bounds.width = maxX - minX;\n        this._bounds.y = minY;\n        this._bounds.height = maxY - minY;\n\n        this._dirty = true;\n    }\n\n    get x(): number\n    {\n        return this.xAxis.value;\n    }\n\n    get y(): number\n    {\n        return this.yAxis.value;\n    }\n}\n","import { ColorSource, Ticker, utils } from '@pixi/core';\nimport { Container, DisplayObject, IDestroyOptions } from '@pixi/display';\nimport { EventMode, FederatedPointerEvent } from '@pixi/events';\nimport { Graphics } from '@pixi/graphics';\nimport type { ListType } from './List';\nimport { List } from './List';\nimport { Trackpad } from './utils/trackpad/Trackpad';\n\nexport type ScrollBoxOptions = {\n    width: number;\n    height: number;\n    background?: ColorSource;\n    type?: ListType;\n    radius?: number;\n    elementsMargin?: number;\n    items?: Container[];\n    disableDynamicRendering?: boolean;\n    vertPadding?: number;\n    horPadding?: number;\n    padding?: number;\n    disableEasing?: boolean;\n};\n\n/**\n * Scrollable view, for arranging lists of Pixi container-based elements.\n *\n * Items, that are out of the visible area, are not rendered by default.\n * This behavior can be changed by setting 'disableDynamicRendering' option to true.\n * @example\n * new ScrollBox({\n *     background: 0XFFFFFF,\n *     width: 200,\n *     height: 300,\n *     items: [\n *         new Graphics().beginFill(0x000000).drawRect(0, 0, 200, 50),\n *         new Graphics().beginFill(0x000000).drawRect(0, 0, 200, 50),\n *         new Graphics().beginFill(0x000000).drawRect(0, 0, 200, 50),\n *         new Graphics().beginFill(0x000000).drawRect(0, 0, 200, 50),\n *         new Graphics().beginFill(0x000000).drawRect(0, 0, 200, 50),\n *         new Graphics().beginFill(0x000000).drawRect(0, 0, 200, 50),\n *         new Graphics().beginFill(0x000000).drawRect(0, 0, 200, 50),\n *     ],\n * });\n */\n\nexport class ScrollBox extends Container\n{\n    protected background: Graphics;\n    protected borderMask: Graphics;\n    protected lastWidth: number;\n    protected lastHeight: number;\n    protected __width = 0;\n    protected __height = 0;\n\n    protected list: List;\n\n    protected _trackpad: Trackpad;\n    protected isDragging = 0;\n    protected interactiveStorage: {\n        item: DisplayObject;\n        eventMode: EventMode;\n    }[] = [];\n    protected visibleItems: Container[] = [];\n    protected pressedChild: Container;\n    protected ticker = Ticker.shared;\n    protected options: ScrollBoxOptions;\n    protected stopRenderHiddenItemsTimeout!: NodeJS.Timeout;\n    protected onMouseScrollBinding = this.onMouseScroll.bind(this);\n\n    /**\n     * @param options\n     * @param {number} options.background - background color of the ScrollBox.\n     * @param {number} options.width - width of the ScrollBox.\n     * @param {number} options.height - height of the ScrollBox.\n     * @param {number} options.radius - radius of the ScrollBox and its masks corners.\n     * @param {number} options.elementsMargin - margin between elements.\n     * @param {number} options.vertPadding - vertical padding of the ScrollBox.\n     * @param {number} options.horPadding - horizontal padding of the ScrollBox.\n     * @param {number} options.padding - padding of the ScrollBox (same horizontal and vertical).\n     * @param {boolean} options.disableDynamicRendering - disables dynamic rendering of the ScrollBox,\n     * so even elements the are not visible will be rendered. Be careful with this options as it can impact performance.\n     */\n    constructor(options?: ScrollBoxOptions)\n    {\n        super();\n\n        if (options)\n        {\n            this.init(options);\n        }\n\n        this.ticker.add(this.update, this);\n    }\n\n    /**\n     * Initiates ScrollBox.\n     * @param options\n     * @param {number} options.background - background color of the ScrollBox.\n     * @param {number} options.width - width of the ScrollBox.\n     * @param {number} options.height - height of the ScrollBox.\n     * @param {number} options.radius - radius of the ScrollBox and its masks corners.\n     * @param {number} options.elementsMargin - margin between elements.\n     * @param {number} options.vertPadding - vertical padding of the ScrollBox.\n     * @param {number} options.horPadding - horizontal padding of the ScrollBox.\n     * @param {number} options.padding - padding of the ScrollBox (same horizontal and vertical).\n     * @param {boolean} options.disableDynamicRendering - disables dynamic rendering of the ScrollBox,\n     * so even elements the are not visible will be rendered. Be careful with this options as it can impact performance.\n     */\n    init(options: ScrollBoxOptions)\n    {\n        this.options = options;\n        this.setBackground(options.background);\n\n        this.__width = options.width | this.background.width;\n        this.__height = options.height | this.background.height;\n\n        options.vertPadding = options.vertPadding ?? options.padding ?? 0;\n        options.horPadding = options.horPadding ?? options.padding ?? 0;\n\n        if (!this.list)\n        {\n            this.list = new List();\n\n            super.addChild(this.list);\n        }\n\n        this.list.init({\n            type: options.type,\n            elementsMargin: options.elementsMargin,\n            vertPadding: options.vertPadding,\n            horPadding: options.horPadding,\n        });\n\n        this.addItems(options.items);\n\n        if (this.hasBounds)\n        {\n            this.addMask();\n            this.makeScrollable();\n        }\n\n        this._trackpad.xAxis.value = 0;\n        this._trackpad.yAxis.value = 0;\n\n        this.resize();\n    }\n\n    protected get hasBounds(): boolean\n    {\n        return !!this.__width || !!this.__height;\n    }\n\n    protected override onChildrenChange()\n    {\n        // do nothing we manage this in addItem\n    }\n\n    /**\n     *  Adds array of items to a scrollable list.\n     * @param {Container[]} items - items to add.\n     */\n    addItems(items: Container[])\n    {\n        if (!items?.length) return;\n\n        items.forEach((item) => this.addItem(item));\n    }\n\n    /** Remove all items from a scrollable list. */\n    removeItems()\n    {\n        this.list.removeChildren();\n    }\n\n    /**\n     * Adds one or more items to a scrollable list.\n     * @param {Container} items - one or more items to add.\n     */\n    addItem<T extends Container[]>(...items: T): T[0]\n    {\n        if (items.length > 1)\n        {\n            items.forEach((item) => this.addItem(item));\n        }\n        else\n        {\n            const child = items[0];\n\n            if (!child.width || !child.height)\n            {\n                console.error('ScrollBox item should have size');\n            }\n\n            child.eventMode = 'static';\n\n            this.list.addChild(child);\n\n            if (!this.options.disableDynamicRendering)\n            {\n                child.renderable = this.isItemVisible(child);\n            }\n        }\n\n        this.resize();\n\n        return items[0];\n    }\n\n    /**\n     * Removes an item from a scrollable list.\n     * @param {number} itemID - id of the item to remove.\n     */\n    removeItem(itemID: number)\n    {\n        const child = this.list.children[itemID];\n\n        if (!child)\n        {\n            return;\n        }\n\n        this.list.removeChild(child);\n\n        this.resize();\n    }\n\n    /**\n     * Checks if the item is visible or scrolled out of the visible part of the view.* Adds an item to a scrollable list.\n     * @param {Container} item - item to check.\n     */\n    isItemVisible(item: Container): boolean\n    {\n        const isVertical = this.options.type === 'vertical' || !this.options.type;\n        let isVisible = false;\n        const list = this.list;\n\n        if (isVertical)\n        {\n            const posY = item.y + list.y;\n\n            if (\n                posY + item.height + this.options.vertPadding >= 0\n                && posY - this.options.vertPadding <= this.options.height\n            )\n            {\n                isVisible = true;\n            }\n        }\n        else\n        {\n            const posX = item.x + list.x;\n\n            if (posX + item.width >= 0 && posX <= this.options.width)\n            {\n                isVisible = true;\n            }\n        }\n\n        return isVisible;\n    }\n\n    /**\n     * Returns all inner items in a list.\n     * @returns {Array<Container> | Array} - list of items.\n     */\n    get items(): Container[] | []\n    {\n        return this.list?.children ?? [];\n    }\n\n    /**\n     * Set ScrollBox background.\n     * @param {number | string} background - background color or texture.\n     */\n    setBackground(background?: ColorSource)\n    {\n        if (this.background)\n        {\n            this.removeChild(this.background);\n        }\n\n        this.options.background = background;\n\n        this.background = new Graphics();\n\n        this.addChildAt(this.background, 0);\n\n        this.resize();\n    }\n\n    protected addMask()\n    {\n        if (!this.borderMask)\n        {\n            this.borderMask = new Graphics();\n            super.addChild(this.borderMask);\n            this.mask = this.borderMask;\n        }\n\n        this.resize();\n    }\n\n    protected makeScrollable()\n    {\n        if (!this._trackpad)\n        {\n            this._trackpad = new Trackpad({\n                disableEasing: this.options.disableEasing,\n            });\n        }\n\n        this.on('pointerdown', (e: FederatedPointerEvent) =>\n        {\n            this.renderAllItems();\n\n            this.isDragging = 1;\n            const touchPoint = this.worldTransform.applyInverse(e.global);\n\n            this._trackpad.pointerDown(touchPoint);\n\n            const listTouchPoint = this.list.worldTransform.applyInverse(e.global);\n\n            this.visibleItems.forEach((item) =>\n            {\n                if (item.x < listTouchPoint.x\n                    && item.x + item.width > listTouchPoint.x\n                    && item.y < listTouchPoint.y\n                    && item.y + item.height > listTouchPoint.y)\n                {\n                    this.pressedChild = item;\n                }\n            });\n        });\n\n        this.on('pointerup', () =>\n        {\n            this.isDragging = 0;\n            this._trackpad.pointerUp();\n            this.restoreItemsInteractivity();\n\n            this.pressedChild = null;\n\n            this.stopRenderHiddenItems();\n        });\n\n        this.on('pointerupoutside', () =>\n        {\n            this.isDragging = 0;\n            this._trackpad.pointerUp();\n            this.restoreItemsInteractivity();\n\n            this.pressedChild = null;\n\n            this.stopRenderHiddenItems();\n        });\n\n        this.on('globalpointermove', (e: FederatedPointerEvent) =>\n        {\n            const touchPoint = this.worldTransform.applyInverse(e.global);\n\n            this._trackpad.pointerMove(touchPoint);\n\n            if (!this.isDragging) return;\n\n            if (this.pressedChild)\n            {\n                this.revertClick(this.pressedChild);\n\n                this.pressedChild = null;\n            }\n        });\n\n        document.addEventListener('wheel', this.onMouseScrollBinding, true);\n    }\n\n    protected setInteractive(interactive: boolean)\n    {\n        this.eventMode = interactive ? 'static' : 'auto';\n    }\n\n    protected get listHeight(): number\n    {\n        return this.list.height + (this.options.vertPadding * 2);\n    }\n\n    protected get listWidth(): number\n    {\n        return this.list.width + (this.options.horPadding * 2);\n    }\n\n    /** Controls item positions and visibility. */\n    resize(): void\n    {\n        if (!this.hasBounds) return;\n\n        this.renderAllItems();\n\n        if (\n            this.borderMask\n            && (this.lastWidth !== this.listWidth\n                || this.lastHeight !== this.listHeight)\n        )\n        {\n            const verPadding = this.options.vertPadding;\n            const horPadding = this.options.horPadding;\n\n            if (!this.options.width)\n            {\n                this.__width += this.listWidth;\n            }\n\n            if (!this.options.height)\n            {\n                this.__height += this.listHeight;\n            }\n\n            this.borderMask\n                .clear()\n                .lineStyle(0)\n                .beginFill(0xffffff)\n                .drawRoundedRect(\n                    0,\n                    0,\n                    this.__width,\n                    this.__height,\n                    this.options.radius | 0,\n                );\n            this.borderMask.eventMode = 'none';\n\n            this.background.clear().lineStyle(0);\n\n            const color = this.options.background;\n\n            this.background.beginFill(\n                color ?? 0x000000,\n                color ? 1 : 0.0000001, // if color is not set, set alpha to 0 to be able to drag by click on bg\n            );\n\n            this.background.drawRoundedRect(\n                0,\n                0,\n                this.__width + horPadding,\n                this.__height + verPadding,\n                this.options.radius | 0,\n            );\n\n            if (this.options.type === 'horizontal')\n            {\n                this.setInteractive(this.listWidth > this.__width);\n            }\n            else\n            {\n                this.setInteractive(this.listHeight > this.__height);\n            }\n\n            this.lastWidth = this.listWidth;\n            this.lastHeight = this.listHeight;\n        }\n\n        if (this._trackpad)\n        {\n            const maxWidth\n                = this.borderMask.width\n                - this.list.width\n                - (this.options.horPadding * 2);\n\n            const maxHeight\n                = this.borderMask.height\n                - this.list.height\n                - (this.options.vertPadding * 2);\n\n            if (this.options.type === 'vertical')\n            {\n                this._trackpad.yAxis.max = -Math.abs(maxHeight);\n            }\n            else if (this.options.type === 'horizontal')\n            {\n                this._trackpad.xAxis.max = -Math.abs(maxWidth);\n            }\n            else\n            {\n                this._trackpad.yAxis.max = -Math.abs(maxHeight);\n                this._trackpad.xAxis.max = -Math.abs(maxWidth);\n            }\n        }\n\n        this.updateVisibleItems();\n    }\n\n    protected onMouseScroll(event: WheelEvent): void\n    {\n        this.renderAllItems();\n\n        if (\n            this.options.type === 'horizontal'\n            && (typeof event.deltaX !== 'undefined'\n                || typeof event.deltaY !== 'undefined')\n        )\n        {\n            const targetPos = event.deltaY\n                ? this.list.x - event.deltaY\n                : this.list.x - event.deltaX;\n\n            if (this.listWidth < this.__width)\n            {\n                this._trackpad.xAxis.value = 0;\n            }\n            else if (\n                targetPos < 0\n                && targetPos + this.listWidth + this.options.horPadding\n                    < this.__width\n            )\n            {\n                this._trackpad.xAxis.value = this.__width - this.listWidth;\n            }\n            else if (targetPos > this.options.horPadding)\n            {\n                this._trackpad.xAxis.value = 0;\n            }\n            else\n            {\n                this._trackpad.xAxis.value = targetPos;\n            }\n        }\n        else if (typeof event.deltaY !== 'undefined')\n        {\n            const targetPos = this.list.y - event.deltaY;\n\n            if (this.listHeight < this.__height)\n            {\n                this._trackpad.yAxis.value = 0;\n            }\n            else if (\n                targetPos < 0\n                && targetPos + this.listHeight + this.options.vertPadding\n                    < this.__height\n            )\n            {\n                this._trackpad.yAxis.value = this.__height - this.listHeight;\n            }\n            else if (targetPos > this.options.vertPadding)\n            {\n                this._trackpad.yAxis.value = 0;\n            }\n            else\n            {\n                this._trackpad.yAxis.value = targetPos;\n            }\n        }\n\n        this.stopRenderHiddenItems();\n    }\n\n    /** Makes it scroll down to the last element. */\n    scrollBottom()\n    {\n        if (!this.interactive)\n        {\n            this.scrollTop();\n        }\n        else\n        {\n            this.scrollTo(this.list.children.length - 1);\n        }\n    }\n\n    /** Makes it scroll up to the first element. */\n    scrollTop()\n    {\n        this.renderAllItems();\n\n        this._trackpad.xAxis.value = 0;\n        this._trackpad.yAxis.value = 0;\n\n        this.stopRenderHiddenItems();\n    }\n\n    protected renderAllItems()\n    {\n        clearTimeout(this.stopRenderHiddenItemsTimeout);\n        this.stopRenderHiddenItemsTimeout = null;\n\n        if (this.options.disableDynamicRendering)\n        {\n            return;\n        }\n\n        this.items.forEach((child) =>\n        {\n            child.renderable = true;\n        });\n    }\n\n    protected stopRenderHiddenItems()\n    {\n        if (this.options.disableDynamicRendering)\n        {\n            return;\n        }\n\n        if (this.stopRenderHiddenItemsTimeout)\n        {\n            clearTimeout(this.stopRenderHiddenItemsTimeout);\n            this.stopRenderHiddenItemsTimeout = null;\n        }\n\n        this.stopRenderHiddenItemsTimeout = setTimeout(() => this.updateVisibleItems(), 2000);\n    }\n\n    protected updateVisibleItems()\n    {\n        this.visibleItems.length = 0;\n\n        this.items.forEach((child) =>\n        {\n            child.renderable = this.isItemVisible(child);\n            this.visibleItems.push(child);\n        });\n    }\n\n    /**\n     * Scrolls to the element with the given ID.\n     * @param elementID\n     */\n    scrollTo(elementID: number)\n    {\n        if (!this.interactive)\n        {\n            return;\n        }\n\n        const target = this.list.children[elementID];\n\n        if (!target)\n        {\n            return;\n        }\n\n        this.renderAllItems();\n\n        this._trackpad.xAxis.value\n            = this.options.type === 'horizontal'\n                ? this.__width\n                  - target.x\n                  - target.width\n                  - this.options.horPadding\n                : 0;\n\n        this._trackpad.yAxis.value\n            = !this.options.type || this.options.type === 'vertical'\n                ? this.__height\n                  - target.y\n                  - target.height\n                  - this.options.vertPadding\n                : 0;\n\n        this.stopRenderHiddenItems();\n    }\n\n    /** Gets component height. */\n    override get height(): number\n    {\n        return this.__height;\n    }\n\n    /** Gets component width. */\n    override get width(): number\n    {\n        return this.__width;\n    }\n\n    protected update()\n    {\n        if (!this.list) return;\n\n        this._trackpad.update();\n\n        const type = this.options.type === 'horizontal' ? 'x' : 'y';\n\n        if (this.list[type] !== this._trackpad[type])\n        {\n            this.list[type] = this._trackpad[type];\n        }\n    }\n\n    /**\n     * Destroys the component.\n     * @param {boolean | IDestroyOptions} [options] - Options parameter.\n     * A boolean will act as if all options have been set to that value\n     */\n    override destroy(options?: IDestroyOptions | boolean)\n    {\n        this.ticker.remove(this.update, this);\n\n        document.removeEventListener('wheel', this.onMouseScrollBinding, true);\n\n        this.background.destroy();\n        this.list.destroy();\n\n        super.destroy(options);\n    }\n\n    protected restoreItemsInteractivity()\n    {\n        this.interactiveStorage.forEach((element) =>\n        {\n            element.item.eventMode = element.eventMode;\n        });\n\n        this.interactiveStorage.length = 0;\n    }\n\n    protected revertClick(item: DisplayObject)\n    {\n        if (item.eventMode !== 'auto')\n        {\n            utils.isMobile.any\n                ? item.emit('pointerupoutside', null)\n                : item.emit('mouseupoutside', null);\n\n            this.interactiveStorage.push({\n                item,\n                eventMode: item.eventMode,\n            });\n\n            item.eventMode = 'auto';\n        }\n\n        // need to disable click for all children too\n        if (item instanceof Container && item.children)\n        {\n            item.children.forEach((child) => this.revertClick(child));\n        }\n    }\n}\n","import { Container } from '@pixi/display';\nimport { Graphics } from '@pixi/graphics';\nimport { Text, TextStyle } from '@pixi/text';\nimport { Signal } from 'typed-signals';\nimport { FancyButton } from './FancyButton';\nimport { ScrollBox, ScrollBoxOptions } from './ScrollBox';\nimport { getView } from './utils/helpers/view';\n\nconst defaultVisibleItems = 5;\n\ntype Offset = {\n    y: number;\n    x: number;\n};\n\nexport type SelectItemsOptions = {\n    items: string[];\n    backgroundColor: number | string;\n    hoverColor?: number;\n    width?: number;\n    height?: number;\n    textStyle?: Partial<TextStyle>;\n    radius?: number;\n};\n\nexport type SelectOptions = {\n    closedBG: string | Container;\n    openBG: string | Container;\n    textStyle?: Partial<TextStyle>;\n    selected?: number;\n    selectedTextOffset?: { x?: number; y?: number };\n\n    items: SelectItemsOptions;\n\n    scrollBoxOffset?: { x?: number; y?: number };\n    scrollBoxWidth?: number;\n    scrollBoxHeight?: number;\n    scrollBoxRadius?: number;\n\n    visibleItems?: number;\n\n    scrollBox?: ScrollBoxOptions & {\n        offset?: Offset;\n    };\n};\n\n/**\n * Container-based component that gives us a selection dropdown.\n *\n * It is a composition of a {@link Button} and a {@link ScrollBox}.\n * @example\n * new Select({\n *     closedBG: `select_closed.png`,\n *     openBG: `select_open.png`,\n *     textStyle: { fill: 0xffffff, fontSize: 20 },\n *     items: {\n *         items,\n *         backgroundColor: 0x000000,\n *         hoverColor: 0x000000,\n *         width: 200,\n *         height: 50,\n *     },\n *     scrollBox: {\n *         width: 200,\n *         height: 350,\n *         radius: 30,\n *     },\n * });\n */\n\nexport class Select extends Container\n{\n    protected openButton!: FancyButton;\n    protected closeButton!: FancyButton;\n    protected openView!: Container;\n    protected scrollBox: ScrollBox;\n\n    /** Selected value ID. */\n    value: number;\n\n    /** Fires when selected value is changed. */\n    onSelect: Signal<(value: number, text: string) => void>;\n\n    constructor(options?: SelectOptions)\n    {\n        super();\n\n        this.onSelect = new Signal();\n\n        if (options)\n        {\n            this.init(options);\n        }\n    }\n\n    /**\n     * Initiates Select.\n     * @param root0\n     * @param root0.closedBG\n     * @param root0.textStyle\n     * @param root0.items\n     * @param root0.openBG\n     * @param root0.selected\n     * @param root0.selectedTextOffset\n     * @param root0.scrollBox\n     * @param root0.visibleItems\n     */\n    init({ closedBG, textStyle, items, openBG, selected, selectedTextOffset, scrollBox, visibleItems }: SelectOptions)\n    {\n        if (this.openView && this.openView !== openBG)\n        {\n            this.removeChild(this.openView);\n        }\n\n        // openButton\n        if (!this.openButton)\n        {\n            this.openButton = new FancyButton({\n                defaultView: getView(closedBG),\n                text: new Text(items?.items ? items.items[0] : '', textStyle),\n                textOffset: selectedTextOffset\n            });\n            this.openButton.onPress.connect(() => this.toggle());\n            this.addChild(this.openButton);\n        }\n        else\n        {\n            this.openButton.defaultView = getView(closedBG);\n            this.openButton.textView = new Text(items?.items ? items.items[0] : '', textStyle);\n\n            this.openButton.textOffset = selectedTextOffset;\n        }\n\n        // openView\n        if (this.openView !== openBG)\n        {\n            this.openView = getView(openBG);\n            this.openView.visible = false;\n            this.addChild(this.openView);\n        }\n\n        // closeButton\n        if (!this.closeButton)\n        {\n            this.closeButton = new FancyButton({\n                defaultView: new Graphics()\n                    .beginFill(0x000000, 0.00001)\n                    .drawRect(0, 0, this.openButton.width, this.openButton.height),\n                text: new Text(items?.items ? items.items[0] : '', textStyle),\n                textOffset: selectedTextOffset\n            });\n            this.closeButton.onPress.connect(() => this.toggle());\n            this.openView.addChild(this.closeButton);\n        }\n        else\n        {\n            this.closeButton.defaultView = new Graphics()\n                .beginFill(0x000000, 0.00001)\n                .drawRect(0, 0, this.openButton.width, this.openButton.height);\n\n            this.closeButton.textView = new Text(items?.items ? items.items[0] : '', textStyle);\n\n            this.openButton.textOffset = selectedTextOffset;\n        }\n\n        // ScrollBox\n        if (!this.scrollBox)\n        {\n            this.scrollBox = new ScrollBox();\n\n            this.openView.addChild(this.scrollBox);\n        }\n        else\n        {\n            this.scrollBox.removeItems();\n        }\n\n        this.scrollBox.init({\n            type: 'vertical',\n            elementsMargin: 0,\n            width: this.openButton.width,\n            height: this.openButton.height * (visibleItems ?? defaultVisibleItems),\n            radius: 0,\n            padding: 0,\n            ...scrollBox\n        });\n\n        this.scrollBox.y = this.openButton.height;\n\n        if (scrollBox?.offset)\n        {\n            this.scrollBox.x = scrollBox.offset.x ?? 0;\n            this.scrollBox.y += scrollBox.offset.y ?? 0;\n        }\n\n        this.convertItemsToButtons(items).forEach((button, id) =>\n        {\n            const text = button.text;\n\n            if (id === selected)\n            {\n                this.openButton.text = text;\n                this.closeButton.text = text;\n            }\n\n            button.onPress.connect(() =>\n            {\n                this.value = id;\n                this.onSelect.emit(id, text);\n                this.openButton.text = text;\n                this.closeButton.text = text;\n                this.close();\n            });\n\n            this.scrollBox.addItem(button);\n        });\n    }\n\n    /** Toggle the select state (open if closed, closes - id open). */\n    toggle()\n    {\n        this.openView.visible = !this.openView.visible;\n        this.openButton.visible = !this.openButton.visible;\n    }\n\n    /** Show dropdown. */\n    open()\n    {\n        this.openView.visible = true;\n        this.openButton.visible = false;\n    }\n\n    /** Hide dropdown. */\n    close()\n    {\n        this.openView.visible = false;\n        this.openButton.visible = true;\n    }\n\n    protected convertItemsToButtons({\n        items,\n        backgroundColor,\n        hoverColor,\n        width,\n        height,\n        textStyle,\n        radius\n    }: SelectItemsOptions): FancyButton[]\n    {\n        const buttons: FancyButton[] = [];\n\n        items.forEach((item) =>\n        {\n            const defaultView = new Graphics().beginFill(backgroundColor).drawRoundedRect(0, 0, width, height, radius);\n\n            const color = hoverColor ?? backgroundColor;\n            const hoverView = new Graphics().beginFill(color).drawRoundedRect(0, 0, width, height, radius);\n\n            const text = new Text(item, textStyle);\n\n            const button = new FancyButton({ defaultView, hoverView, text });\n\n            buttons.push(button);\n        });\n\n        return buttons;\n    }\n}\n","import { Container } from '@pixi/display';\nimport { FederatedPointerEvent } from '@pixi/events';\nimport { Signal } from 'typed-signals';\n\nimport type { DragObject } from './utils/HelpTypes';\nimport { BaseSliderOptions, SliderBase } from './SliderBase';\n\nexport type SliderOptions = BaseSliderOptions & {\n    slider: Container | string;\n    value?: number;\n};\n\n/**\n * Creates a slider to select a single value.\n * @example\n * new Slider({\n *     bg: 'slider_bg.png',\n *     fill: 'slider.png',\n *     slider: 'slider.png',\n *     min: 0,\n *     max: 100,\n *     value: 50,\n * });\n *\n * singleSlider.onChange.connect((value) => {\n *     console.log(`Slider changed to ${value}`);\n * });\n */\nexport class Slider extends SliderBase\n{\n    protected sliderOptions: SliderOptions;\n\n    /** Fires when value is changing, on every move of slider. */\n    onUpdate: Signal<(value: number) => void> = new Signal();\n\n    /** Fires when value changed, only when slider is released. */\n    onChange: Signal<(value: number) => void> = new Signal();\n\n    constructor(options: SliderOptions)\n    {\n        super({\n            slider1: options.slider,\n            value1: options.value,\n            ...options\n        });\n\n        this.sliderOptions = options;\n\n        this.progress = ((options.value ?? this.min) - this.min) / (this.max - this.min) * 100;\n\n        this.value = options.value ?? this.min;\n    }\n\n    /** Return selected value. */\n    get value(): number\n    {\n        return this._value1;\n    }\n\n    /** Set selected value. */\n    set value(value: number)\n    {\n        if (value === this._value1) return;\n\n        if (value < this.min) value = this.min;\n        if (value > this.max) value = this.max;\n\n        this._value1 = value;\n\n        this.updateSlider();\n\n        this.onUpdate?.emit(this.value);\n    }\n\n    /** Set slider instance ot texture. */\n    // eslint-disable-next-line accessor-pairs\n    set slider(value: Container | string)\n    {\n        this.slider1 = value;\n        this.updateSlider();\n    }\n\n    protected override update(event: FederatedPointerEvent)\n    {\n        super.update(event);\n\n        if (!this.dragging) return;\n\n        const obj = event.currentTarget as DragObject;\n        const { x } = obj.parent.worldTransform.applyInverse(event.global);\n\n        this.progress = this.validate((x / this.bg?.width) * 100);\n        this.value = this.min + (((this.max - this.min) / 100) * this.progress);\n    }\n\n    protected override change()\n    {\n        this.onChange?.emit(this.value);\n    }\n\n    protected updateSlider()\n    {\n        this._slider1.x = ((this.bg?.width / 100) * this.progress) - (this._slider1.width / 2);\n        this._slider1.y = this.bg?.height / 2;\n\n        if (this.sliderOptions.showValue)\n        {\n            this.value1Text.text = `${Math.round(this.value)}`;\n\n            const sliderPosX = this._slider1.x + (this._slider1.width / 2);\n            const sliderPosY = this._slider1.y;\n\n            this.value1Text.x = sliderPosX + (this.sliderOptions.valueTextOffset?.x ?? 0);\n            this.value1Text.y = sliderPosY + (this.sliderOptions.valueTextOffset?.y ?? 0);\n        }\n    }\n\n    /**\n     * Sets width of a Sliders background and fill.\n     * If nineSlicePlane is set, then width will be set to nineSlicePlane.\n     * If nineSlicePlane is not set, then width will control components width as Container.\n     * @param value - Width value.\n     */\n    override set width(value: number)\n    {\n        super.width = value;\n\n        this.updateSlider();\n    }\n\n    /** Gets width of a Slider. */\n    override get width(): number\n    {\n        return super.width;\n    }\n\n    /**\n     * Sets height of a Sliders background and fill.\n     * If nineSlicePlane is set, then height will be set to nineSlicePlane.\n     * If nineSlicePlane is not set, then height will control components height as Container.\n     * @param value - Height value.\n     */\n    override set height(value: number)\n    {\n        super.height = value;\n\n        this.updateSlider();\n    }\n\n    /** Gets height of a Slider. */\n    override get height(): number\n    {\n        return super.height;\n    }\n}\n"],"names":["ButtonEvents","__publicField","Signal","view","utils","e","isMobile","_e","i","s","o","t","n","Button","enabled","ButtonContainer","Container","getView","Sprite","getSpriteView","Switcher","views","triggerEvents","activeViewID","event","stateView","viewInstance","id","exID","res","cleanup","element","x","f","h","l","CheckBox","options","text","style","_a","Text","_b","_c","_d","wasChecked","unchecked","checked","uncheckedView","checkedView","CircularProgressBar","Graphics","backgroundColor","lineWidth","radius","backgroundAlpha","alpha","value","fillColor","fillAlpha","cap","startAngle","endAngle","DEG_TO_RAD","k","a","r","ProgressBar","bg","fill","fillPaddings","progress","PixiNineSlicePlane","Texture","fillPadding","offsetX","offsetY","leftWidth","rightWidth","topHeight","bottomHeight","texture","width","leftPadding","rightPadding","height","topPadding","bottomPadding","SliderBase","sliderData","slider","container","obj","_event","v","m","u","DoubleSlider","value1","value2","slider1Dist","slider2Dist","_f","_g","sliderPosX","sliderPosY","getTextView","fitToView","parent","child","padding","scaleX","scaleY","maxWidth","maxHeight","widthOverflow","heightOverflow","FancyButton","defaultView","hoverView","pressedView","disabledView","offset","textOffset","iconOffset","scale","anchor","anchorX","anchorY","icon","animations","ObservablePoint","Ticker","Group","newState","force","currentView","activeView","state","stateOffset","defaultStateOffset","_h","y","Rectangle","viewType","NineSlicePlane","textView","defaultStateAnimation","stateAnimation","data","Tween","E","Input","delta","key","defaultTextStyle","textStyle","TextStyle","array","input","dt","align","paddings","_i","_j","_k","_l","L","List","item","type","margin","elementsMargin","MaskedFrame","target","mask","borderWidth","borderColor","borderMask","RadioGroup","items","checkBox","ids","p","Spring","_","ScrollSpring","speed","pos","to","diff","toDirection","currentDirection","SlidingNumber","newPosition","instant","max","d","Trackpad","Point","w","minX","maxX","minY","maxY","ScrollBox","itemID","isVertical","isVisible","list","posY","posX","background","touchPoint","listTouchPoint","interactive","verPadding","horPadding","color","targetPos","elementID","V","O","F","b","S","defaultVisibleItems","Select","closedBG","openBG","selected","selectedTextOffset","scrollBox","visibleItems","__spreadValues","button","hoverColor","buttons","Slider"],"mappings":"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"}