/// <reference types="node" />
import { ColorSource, Ticker } from '@pixi/core';
import { Container, DisplayObject, IDestroyOptions } from '@pixi/display';
import { EventMode } from '@pixi/events';
import { Graphics } from '@pixi/graphics';
import type { ListType } from './List';
import { List } from './List';
import { Trackpad } from './utils/trackpad/Trackpad';
export type ScrollBoxOptions = {
    width: number;
    height: number;
    background?: ColorSource;
    type?: ListType;
    radius?: number;
    elementsMargin?: number;
    items?: Container[];
    disableDynamicRendering?: boolean;
    vertPadding?: number;
    horPadding?: number;
    padding?: number;
    disableEasing?: boolean;
};
/**
 * Scrollable view, for arranging lists of Pixi container-based elements.
 *
 * Items, that are out of the visible area, are not rendered by default.
 * This behavior can be changed by setting 'disableDynamicRendering' option to true.
 * @example
 * new ScrollBox({
 *     background: 0XFFFFFF,
 *     width: 200,
 *     height: 300,
 *     items: [
 *         new Graphics().beginFill(0x000000).drawRect(0, 0, 200, 50),
 *         new Graphics().beginFill(0x000000).drawRect(0, 0, 200, 50),
 *         new Graphics().beginFill(0x000000).drawRect(0, 0, 200, 50),
 *         new Graphics().beginFill(0x000000).drawRect(0, 0, 200, 50),
 *         new Graphics().beginFill(0x000000).drawRect(0, 0, 200, 50),
 *         new Graphics().beginFill(0x000000).drawRect(0, 0, 200, 50),
 *         new Graphics().beginFill(0x000000).drawRect(0, 0, 200, 50),
 *     ],
 * });
 */
export declare class ScrollBox extends Container {
    protected background: Graphics;
    protected borderMask: Graphics;
    protected lastWidth: number;
    protected lastHeight: number;
    protected __width: number;
    protected __height: number;
    protected list: List;
    protected _trackpad: Trackpad;
    protected isDragging: number;
    protected interactiveStorage: {
        item: DisplayObject;
        eventMode: EventMode;
    }[];
    protected visibleItems: Container[];
    protected pressedChild: Container;
    protected ticker: Ticker;
    protected options: ScrollBoxOptions;
    protected stopRenderHiddenItemsTimeout: NodeJS.Timeout;
    protected onMouseScrollBinding: (event: WheelEvent) => void;
    /**
     * @param options
     * @param {number} options.background - background color of the ScrollBox.
     * @param {number} options.width - width of the ScrollBox.
     * @param {number} options.height - height of the ScrollBox.
     * @param {number} options.radius - radius of the ScrollBox and its masks corners.
     * @param {number} options.elementsMargin - margin between elements.
     * @param {number} options.vertPadding - vertical padding of the ScrollBox.
     * @param {number} options.horPadding - horizontal padding of the ScrollBox.
     * @param {number} options.padding - padding of the ScrollBox (same horizontal and vertical).
     * @param {boolean} options.disableDynamicRendering - disables dynamic rendering of the ScrollBox,
     * so even elements the are not visible will be rendered. Be careful with this options as it can impact performance.
     */
    constructor(options?: ScrollBoxOptions);
    /**
     * Initiates ScrollBox.
     * @param options
     * @param {number} options.background - background color of the ScrollBox.
     * @param {number} options.width - width of the ScrollBox.
     * @param {number} options.height - height of the ScrollBox.
     * @param {number} options.radius - radius of the ScrollBox and its masks corners.
     * @param {number} options.elementsMargin - margin between elements.
     * @param {number} options.vertPadding - vertical padding of the ScrollBox.
     * @param {number} options.horPadding - horizontal padding of the ScrollBox.
     * @param {number} options.padding - padding of the ScrollBox (same horizontal and vertical).
     * @param {boolean} options.disableDynamicRendering - disables dynamic rendering of the ScrollBox,
     * so even elements the are not visible will be rendered. Be careful with this options as it can impact performance.
     */
    init(options: ScrollBoxOptions): void;
    protected get hasBounds(): boolean;
    protected onChildrenChange(): void;
    /**
     *  Adds array of items to a scrollable list.
     * @param {Container[]} items - items to add.
     */
    addItems(items: Container[]): void;
    /** Remove all items from a scrollable list. */
    removeItems(): void;
    /**
     * Adds one or more items to a scrollable list.
     * @param {Container} items - one or more items to add.
     */
    addItem<T extends Container[]>(...items: T): T[0];
    /**
     * Removes an item from a scrollable list.
     * @param {number} itemID - id of the item to remove.
     */
    removeItem(itemID: number): void;
    /**
     * Checks if the item is visible or scrolled out of the visible part of the view.* Adds an item to a scrollable list.
     * @param {Container} item - item to check.
     */
    isItemVisible(item: Container): boolean;
    /**
     * Returns all inner items in a list.
     * @returns {Array<Container> | Array} - list of items.
     */
    get items(): Container[] | [];
    /**
     * Set ScrollBox background.
     * @param {number | string} background - background color or texture.
     */
    setBackground(background?: ColorSource): void;
    protected addMask(): void;
    protected makeScrollable(): void;
    protected setInteractive(interactive: boolean): void;
    protected get listHeight(): number;
    protected get listWidth(): number;
    /** Controls item positions and visibility. */
    resize(): void;
    protected onMouseScroll(event: WheelEvent): void;
    /** Makes it scroll down to the last element. */
    scrollBottom(): void;
    /** Makes it scroll up to the first element. */
    scrollTop(): void;
    protected renderAllItems(): void;
    protected stopRenderHiddenItems(): void;
    protected updateVisibleItems(): void;
    /**
     * Scrolls to the element with the given ID.
     * @param elementID
     */
    scrollTo(elementID: number): void;
    /** Gets component height. */
    get height(): number;
    /** Gets component width. */
    get width(): number;
    protected update(): void;
    /**
     * Destroys the component.
     * @param {boolean | IDestroyOptions} [options] - Options parameter.
     * A boolean will act as if all options have been set to that value
     */
    destroy(options?: IDestroyOptions | boolean): void;
    protected restoreItemsInteractivity(): void;
    protected revertClick(item: DisplayObject): void;
}
//# sourceMappingURL=ScrollBox.d.ts.map